// {{ capitalize .Description }}
func (c *HTTP{{ capitalize .ProtoName }}Client) {{ capitalize .Name }}(ctx context.Context,
    {{- $input := .Input }}
    {{- range $idx, $v := .Input }} req{{ capitalize $v.Name }} {{ $v.T.GoType }}{{- if ne (len $input) $idx }},{{ end }}{{ end }}) (
    {{- range .Output }}resp{{ capitalize .Name }} {{ .T.GoType }}, {{ end }}err error) {
    var (
        b []byte
        req *http.Request
        resp *http.Response
        {{ if gt (len .Input) 0 }}reqbody httpReqProto{{ capitalize .ProtoName }}Method{{ capitalize .Name }}{{ end }}
        {{ if gt (len .Output) 0 }}respbody httpRespProto{{ capitalize .ProtoName }}Method{{ capitalize .Name }}{{ end }}
    )

    {{- if gt (len .Input) 0 }}
    reqbody = httpReqProto{{ capitalize .ProtoName }}Method{{ capitalize .Name }}{
        {{- range .Input }}
        {{ capitalize .Name }}: req{{ capitalize .Name }},
        {{- end }}
    }

    if b, err = json.Marshal(&reqbody); err != nil {
        return
    }
    {{ end }}

    if req, err = c.newRequest({{ if gt (len .Input) 0 }}"POST"{{ else }}"GET"{{ end }}, {{ lower .Name | doublequote }}, bytes.NewReader(b)); err != nil {
        return
    }

    req = req.WithContext(ctx)
    if resp, err = c.client.do(req); err != nil {
        return
    }

    b, err = ioutil.ReadAll(resp.Body)
    resp.Body.Close()
    if err != nil {
        return
    }

    {{- if gt (len .Input) 0 }}
    if err = json.Unmarshal(b, &respbody); err != nil {
        return
    }
    {{ end }}

    {{- range .Output }}
    resp{{ capitalize .Name }} = respbody.{{ capitalize .Name }}
    {{- end }}
    return
}
