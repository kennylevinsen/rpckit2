// {{ required .Description | capitalize}}
func (c *HTTP{{ required .ProtoName | capitalize }}Client) {{ required .Name | capitalize }}(ctx context.Context,
    {{- $input := required .Input }}
    {{- range $idx, $v := required .Input }} req{{ required $v.Name | capitalize}} {{ required $v.T.GoType }}{{- if ne (len $input) $idx }},{{ end }}{{ end }}) (
    {{- range required .Output }}resp{{ required .Name | capitalize}} {{ required .T.GoType }}, {{ end }}err error) {
    var (
        b []byte
        req *http.Request
        resp *http.Response
        {{ if gt (len .Input) 0 }}{{ if not (and (eq (len .Input) 1) (eq (index .Input 0).T.GoType "[]byte")) }}reqbody httpReqProto{{ required .ProtoName | capitalize }}Method{{ required .Name | capitalize }}{{ end }}{{ end }}
        {{ if gt (len .Output) 0 }}{{ if not (and (eq (len .Output) 1) (eq (index .Output 0).T.GoType "[]byte")) }}respbody httpRespProto{{ required .ProtoName | capitalize }}Method{{ required .Name | capitalize}}{{ end }}{{ end }}
    )

    {{- if gt (len .Input) 0 }}
    {{ if and (eq (len .Input) 1) (eq (index .Input 0).T.GoType "[]byte") }}
    b = req{{ required (index .Input 0).Name | capitalize }}
    {{- else }}
    reqbody = httpReqProto{{ required .ProtoName | capitalize }}Method{{ required .Name | capitalize }}{
        {{- range required .Input }}
        {{ required .Name | capitalize }}: req{{ required .Name | capitalize }},
        {{- end }}
    }

    if b, err = json.Marshal(&reqbody); err != nil {
        return
    }
    {{ end }}
    {{ end }}

    if req, err = c.newRequest({{ if gt (len .Input) 0 }}"POST"{{ else }}"GET"{{ end }}, {{ required .Name | lower | doublequote }}, bytes.NewReader(b)); err != nil {
        return
    }

    req = req.WithContext(ctx)
    if resp, err = c.client.do(req); err != nil {
        return
    }

    b, err = ioutil.ReadAll(resp.Body)
    resp.Body.Close()
    if err != nil {
        return
    }

    if !(resp.StatusCode >= 200 && resp.StatusCode < 300) {
        var errorbody struct {
            Error string `json:"error"`
        }

        if err = json.Unmarshal(b, &errorbody); err != nil {
            return
        }

        err = errors.New(errorbody.Error)
        return
    }

    {{- if gt (len .Output) 0 }}
    {{ if and (eq (len .Output) 1) (eq (index .Output 0).T.GoType "[]byte") }}
    resp{{ required (index .Output 0).Name | capitalize }} = b
    {{ else }}
    if err = json.Unmarshal(b, &respbody); err != nil {
        return
    }

    {{- range .Output }}
    resp{{ required .Name | capitalize}} = respbody.{{ required .Name | capitalize }}
    {{- end }}
    {{ end }}
    {{- end }}
    return
}
