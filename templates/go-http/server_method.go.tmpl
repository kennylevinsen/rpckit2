// HTTP{{ capitalize .ProtoName }}Server creates a new HTTPServer for the {{ .ProtoName }} protocol.
func HTTP{{ capitalize .ProtoName }}Server(methods {{ capitalize .ProtoName }}Protocol) HTTPServer {
    return &httpCallServerFor{{ capitalize .ProtoName }}{methods: methods}
}

type httpCallServerFor{{ capitalize .ProtoName }} struct {
    methods {{ capitalize .ProtoName }}Protocol
}

func (c *httpCallServerFor{{ capitalize .ProtoName }}) RegisterToMux(m *http.ServeMux) {
    {{- $protoName := .ProtoName }}
    {{- range .Methods }}
    m.HandleFunc("/{{ $protoName }}/{{ lower .Name }}", func(w http.ResponseWriter, r *http.Request) {
        {{- if gt (len .Input) 0 }}
        if r.Method != "POST" {
            w.WriteHeader(http.StatusMethodNotAllowed)
            return
        }

        {{ end -}}

        var (
            err error
            b []byte
            {{ if gt (len .Input) 0 }}reqbody httpReqProto{{ capitalize $protoName }}Method{{ capitalize .Name }}{{ end }}
            {{ if gt (len .Output) 0 }}respbody httpRespProto{{ capitalize $protoName }}Method{{ capitalize .Name }}{{ end }}
        )

        b, err = ioutil.ReadAll(r.Body)
        if err != nil {
            w.WriteHeader(http.StatusBadRequest)
            return
        }

        {{- if gt (len .Input) 0 }}
        if err = json.Unmarshal(b, &reqbody); err != nil {
            w.WriteHeader(http.StatusBadRequest)
            return
        }
        {{ else }}
        if len(b) > 0 {
            w.WriteHeader(http.StatusBadRequest)
            return
        }
        {{ end }}

        {{- $methodName := .Name }}
        {{ range .Output }}respbody.{{ capitalize .Name }}, {{ end }}err = c.methods.{{ capitalize .Name }}(r.Context(){{- range .Input }}, reqbody.{{ capitalize .Name }}{{- end }})
        if err != nil {
            w.WriteHeader(http.StatusInternalServerError)
            errorbody := struct {
                Error string `json:"error"`
            }{
                Error: err.Error(),
            }
            if b, err = json.Marshal(&errorbody); err != nil {
                return
            }

            w.Header().Set("Content-Type", "application/json")
            w.Write(b)
            return
        }

        {{- if gt (len .Output) 0 }}
        if b, err = json.Marshal(&respbody); err != nil {
            w.WriteHeader(http.StatusInternalServerError)
            // TODO: Add error!
            return
        }
        {{ else }}
        b = nil
        {{ end }}

        w.Header().Set("Content-Type", "application/json")
        w.WriteHeader(http.StatusOK)
        w.Write(b)
    })
    {{- end }}
}
