func (s *serverMethodsCallHandler) RPCCall(methodID uint64, m *message) (resp rpcMessage) {
    defer func() {
        if r := recover(); r != nil {
            resp = &rpcError{id: ApplicationError, error: "unknown error occurred"}
        }
    }()

    switch methodID { {{ range .Methods }}
    case uint64(ServerMethod{{ .Name }}):
        args := serverRequest_{{ .Name }}{}
        if err := args.RPCDecode(m); err != nil {
            return &rpcError{id: ProtocolError, error: fmt.Sprintf("unable to decode method call: %v", err)}
        }
        {{ range .Output }}{{ .Name }}{{ end }}, err := s.methods.{{ .Name }}( {{ range .Input }}
            args._{{ .Name }},
            {{- end }}
        )
        if err != nil {
            if rpcMsg, ok := err.(rpcMessage); ok {
                return rpcMsg
            }
            return &rpcError{id: ApplicationError, error: err.Error()}
        }
        return &serverResponse_{{ .Name }}{ {{ range .Output }}
            _{{ .Name }}: {{ .Name }},
            {{- end }}
        }
    {{- end }}
    default:
        return &rpcError{id: GenericError, error: fmt.Sprintf("unknown method ID: %d", methodID)}
    }
}
