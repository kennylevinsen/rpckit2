func (c *ServerClient) {{ .Name}}( {{ range .Input }}
        {{ .Name }} {{ .T.GoType }},
    {{- end }}
    ) ( {{ range .Output }}
        {{ .Name }} {{ .T.GoType }},
    {{- end }}
        err RPCError,
    ) {

    resultTypeID, msg, err := c.c.call(true, 1, uint64(ServerMethod{{ .Name }}), &serverRequest_{{ .Name }}{ {{ range .Input }}
        _{{ .Name }}: {{ .Name }},
        {{- end }}
    })

    switch resultTypeID {
    case 2:
        var r serverResponse_{{ .Name }}
        decodeError := r.RPCDecode(msg)
        if decodeError != nil {
            err = &rpcError{id: GenericError, error: fmt.Sprintf("could not decode result: %v", decodeError)}
            return
        }
        {{ range .Output }}
        {{ .Name }} = r._{{ .Name }}
        {{- end}}
    default:
        err = &rpcError{id: ProtocolError, error: fmt.Sprintf("incorrect return type: expected %d, got %d", 2, resultTypeID)}
    }

    return
}
