{{ range required .Protocols }}
{{- $protoName := required .Name -}}
{{- $protoID := required .ID -}}
{{ range required .Methods }}
// {{ required .Description | capitalize }}
func (c *RPC{{ required $protoName | capitalize }}Client) {{ required .Name | capitalize }}(ctx context.Context,
    {{- $input := required .Input }}
    {{- range $idx, $v := required .Input }} req{{ required $v.Name | capitalize }} {{ required $v.T.GoType }}{{- if ne (len $input) $idx }},{{ end }}{{ end }}) (
    {{- range required .Output }}resp{{ required .Name | capitalize }} {{ required .T.GoType }}, {{ end }}err error) {

    var decoderErr error
    decoder := func(msg *message) error {
        resultTypeID, err := msg.ReadVarint()
		if err != nil {
            decoderErr = &rpcError{id: GenericError, error: fmt.Sprintf("error while decoding message type: %v", err)}
            return decoderErr
		}
        switch resultTypeID {
        case uint64(proto{{ required $protoName | capitalize }}Method{{ required .Name | capitalize }}):
            var r rpcRespProto{{ required $protoName | capitalize }}Method{{ required .Name | capitalize }}
            if err := r.RPCDecode(msg); err != nil {
                decoderErr = &rpcError{id: GenericError, error: fmt.Sprintf("could not decode result: %v", err)}
                return decoderErr
            }
            {{- range required .Output }}
            resp{{ required .Name | capitalize }} = r.{{ required .Name | capitalize }}
            {{- end}}
            return nil
        default:
            var isPrivate bool
            err, isPrivate = c.c.handlePrivateResponse(resultTypeID, msg)
            if !isPrivate {
                decoderErr = &rpcError{id: ProtocolError, error: fmt.Sprintf("unexpected return type for call type %d: %d", uint64(proto{{ required $protoName | capitalize }}Method{{ required .Name | capitalize }}), resultTypeID)}
                return decoderErr
            }
            decoderErr = err
            return nil
        }
    }

    err = c.c.call(ctx,decoder, true, {{ required $protoID }}, uint64(proto{{ required $protoName | capitalize }}Method{{ required .Name | capitalize }}), &rpcReqProto{{ required $protoName | capitalize }}Method{{ required .Name | capitalize }}{
        {{- range required .Input }}
        {{ required .Name | capitalize }}: req{{ required .Name | capitalize }},
        {{- end }}
    })

    if decoderErr != nil {
        err = decoderErr
    }

    return
}
{{ end }}
{{ end }}