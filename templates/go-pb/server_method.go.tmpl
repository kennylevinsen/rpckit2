// RPC{{ capitalize .ProtoName }}Handler creates a new RPCServer for the {{ .ProtoName }} protocol.
func RPC{{ capitalize .ProtoName }}Handler(methods {{ capitalize .ProtoName }}Methods) RPCServer {
    return &rpcServer{
        ProtocolID: {{ .ProtoID }},
        Handler: &rpcCallHandlerFor{{ capitalize .ProtoName }}{methods: methods},
    }
}

type rpcCallHandlerFor{{ capitalize .ProtoName }} struct {
    methods {{ capitalize .ProtoName }}Methods
}

func (s *rpcCallHandlerFor{{ capitalize .ProtoName }}) rpcCall(ctx context.Context, methodID uint64, m *message) (resp rpcMessage) {
    defer func() {
        if r := recover(); r != nil {
            resp = &rpcError{id: ApplicationError, error: "unknown error occurred"}
        }
    }()

    {{ $protoName := .ProtoName -}}
    switch methodID {
    {{- range .Methods }}
    case uint64(proto{{ capitalize $protoName }}Method{{ capitalize .Name }}):
        args := rpcReqProto{{ capitalize $protoName }}Method{{ capitalize .Name }}{}
        if err := args.RPCDecode(m); err != nil {
            return &rpcError{id: ProtocolError, error: fmt.Sprintf("unable to decode method call: %v", err)}
        }
        {{ range .Output }}{{ .Name }}, {{ end }}err := s.methods.{{ capitalize .Name }}(
            ctx,
            {{- range .Input }}
            args.rpcReq{{ capitalize .Name }},
            {{- end }}
        )
        if err != nil {
            if rpcMsg, ok := err.(rpcMessage); ok {
                return rpcMsg
            }
            return &rpcError{id: ApplicationError, error: err.Error()}
        }
        return &rpcRespProto{{ capitalize $protoName }}Method{{ capitalize .Name }}{
            {{- range .Output }}
            rpcResp{{ capitalize .Name }}: {{ .Name }},
            {{- end }}
        }
    {{- end }}
    default:
        return &rpcError{id: GenericError, error: fmt.Sprintf("unknown method ID: %d", methodID)}
    }
}
