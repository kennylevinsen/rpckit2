type {{ .Prefix }}Proto{{ capitalize .ProtoName }}Method{{ capitalize .Name }} struct {
{{- range .Fields }}
    {{ capitalize .Name }} {{ .T.GoType }}
{{- end }}
}

func (s *{{ .Prefix }}Proto{{ capitalize .ProtoName }}Method{{ capitalize .Name }}) RPCID() uint64 {
    return uint64(proto{{ capitalize .ProtoName }}Method{{ capitalize .Name }})
}

func (s *{{ .Prefix }}Proto{{ capitalize .ProtoName }}Method{{ capitalize .Name }}) RPCEncode(m *message) error {
    {{- range .Fields }}
    {{- if .T.IsArray }}
    for _, v := range s.{{ capitalize .Name }} {
        m.WritePB{{ .T.InnerValue.String }}({{ .ID }}, v)
    }
    {{- else if .T.IsMap }}
    for k, v := range s.{{ capitalize .Name }} {
        em := newEmbeddedMessage(messageCapacity)
        em.WritePB{{ .T.InnerKey.String }}(1, k)
        em.WritePB{{ .T.InnerValue.String }}(2, v)
        m.WritePBMessage({{ .ID }}, em)
    }
    {{- else }}
    m.WritePB{{ .T.String }}({{ .ID }}, s.{{ capitalize .Name }})
    {{- end }}
    {{- end }}
    return nil
}

func (s *{{ .Prefix }}Proto{{ capitalize .ProtoName }}Method{{ capitalize .Name }}) RPCDecode(m *message) error {
    var (
        err error
        tag uint64
    )
    for err == nil {
        tag, err = m.ReadVarint()
        switch tag {
        {{- range .Fields }}
        case uint64({{ .ID }} << 3) | uint64({{ template "go-pb/property_to_wiretype.go.tmpl" .T.String}}):
            {{- if .T.IsArray }}
            {{- if or .T.InnerValue.IsArray .T.InnerValue.IsMap }}
            {{ error "Inner value of array cannot be array or map for RPC" }}
            {{- end}}
            var v {{ .T.InnerValue.GoType }}
            v, err = m.Read{{ .T.InnerValue.String }}()
            s.{{ capitalize .Name }} = append(s.{{ capitalize .Name }}, v)
            {{- else if .T.IsMap }}
            var em *message
            if s.{{ capitalize .Name }} == nil {
                s.{{ capitalize .Name }} = make({{ .T.GoType}})
            }

            var k {{ .T.InnerKey.GoType }}
            var v {{ .T.InnerValue.GoType }}
            em, err = m.ReadEmbeddedMessage()
            if err != nil {
                break
            }

            tag, err = em.ReadVarint()
            switch tag {
            case uint64(1 << 3) | uint64({{ template "go-pb/property_to_wiretype.go.tmpl" .T.InnerKey.String}}):
                k, err = em.Read{{ .T.InnerKey.String }}()
            default:
                if err != io.EOF {
                    err = m.ReadPBSkip(tag)
                }
            }

            tag, err = em.ReadVarint()
            switch tag {
            case uint64(2 << 3) | uint64({{ template "go-pb/property_to_wiretype.go.tmpl" .T.InnerValue.String}}):
                v, err = em.Read{{ .T.InnerValue.String }}()
                s.{{ capitalize .Name }}[k] = v
            default:
                if err != io.EOF {
                    err = m.ReadPBSkip(tag)
                }
            }
            if err == io.EOF {
                err = nil
            } else if err != nil {
                break
            }
            {{- else }}
            s.{{ capitalize .Name }}, err = m.Read{{ .T.String }}()
            {{- end }}
        {{- end }}
        default:
            if err != io.EOF {
                err = m.ReadPBSkip(tag)
            }
        }
    }
    if err == io.EOF {
        return nil
    }
    return err
}
