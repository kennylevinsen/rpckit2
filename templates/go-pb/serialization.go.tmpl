{{- if eq (len .Fields) 0 -}}
type {{ .Prefix }}Proto{{ capitalize .ProtoName }}Method{{ capitalize .Name }} struct {}

func (s *{{ .Prefix }}Proto{{ capitalize .ProtoName }}Method{{ capitalize .Name }}) RPCEncode(m *message) error { return nil }
func (s *{{ .Prefix }}Proto{{ capitalize .ProtoName }}Method{{ capitalize .Name }}) RPCDecode(m *message) error { return nil }
{{- else -}}
type {{ .Prefix }}Proto{{ capitalize .ProtoName }}Method{{ capitalize .Name }} struct {
{{- range .Fields }}
    {{ capitalize .Name }} {{ .T.GoType }}
{{- end }}
}

func (s *{{ .Prefix }}Proto{{ capitalize .ProtoName }}Method{{ capitalize .Name }}) RPCEncode(m *message) error {
    {{- range .Fields }}
    {{- $accessor := format "s.%s" (capitalize .Name) -}}
    {{ template "go-pb/marshal.go.tmpl" dict "Field" .T "Accessor" $accessor "ID" .ID "Message" "m" }}
    {{- end -}}
    return nil
}

func (s *{{ .Prefix }}Proto{{ capitalize .ProtoName }}Method{{ capitalize .Name }}) RPCDecode(m *message) error {
    var (
        err error
        tag uint64
    )
    for err == nil {
        tag, err = m.ReadVarint()
        switch tag {
        {{- range .Fields }}
        case uint64({{ .ID }} << 3) | uint64({{ template "go-pb/property_to_wiretype.go.tmpl" .T.String}}):
            {{- template "go-pb/unmarshal.go.tmpl" dict "Field" .T "Accessor" (format "s.%s" (capitalize .Name)) "Message" "m" -}}
        {{- end }}
        default:
            if err != io.EOF {
                err = m.ReadPBSkip(tag)
            }
        }
    }
    if err == io.EOF {
        return nil
    }
    return err
}
{{ end }}
func (s *{{ .Prefix }}Proto{{ capitalize .ProtoName }}Method{{ capitalize .Name }}) RPCID() uint64 {
    return uint64(proto{{ capitalize .ProtoName }}Method{{ capitalize .Name }})
}
