// Code generated by go-bindata. DO NOT EDIT. @generated
// sources:
// templates/go/rpckit.go.tmpl
// templates/go/rpckit_boilerplate.go.tmpl
// templates/go/rpckit_client_method.go.tmpl
// templates/go/rpckit_header.go.tmpl
// templates/go/rpckit_rpccall.go.tmpl
// templates/go/rpckit_serialization.go.tmpl
// templates/go/rpckit_server_method.go.tmpl
package rpckit2

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesGoRpckitGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd0\xcb\x6a\xf3\x30\x10\x05\xe0\xfd\xff\x14\xc3\xec\x23\xf8\xbb\xef\x2e\x14\xbc\xe8\x85\xf6\x01\x82\x2a\x9d\x24\xa2\xb2\xa4\x8e\xc6\xa1\x54\xf8\xdd\x8b\xd3\x3b\x8e\x43\xb7\x67\xce\xf0\x49\xd3\x1a\x79\x6c\x43\x02\xb1\x14\xf7\x14\x94\x69\x35\x8e\xff\x5a\x23\x45\x5f\xa2\xd5\xaf\xc1\x66\x0f\xeb\x21\x66\x97\x8d\xf6\x25\x32\x19\x5a\x28\x3e\xe6\x10\x21\xc7\x6c\xde\x16\x9b\x76\x20\x73\x0d\xdd\x67\x5f\xa7\xd0\xe5\x54\x95\x1e\x20\x07\xc8\x7b\xdc\x1a\x99\x1b\xdb\x83\xc6\xf1\x57\x4e\x97\x34\x8d\xba\xf5\xb4\x76\x92\xae\x90\x60\x63\x78\xb5\x1a\x72\xfa\xc6\x7d\x70\x4a\x7c\x27\xd8\x86\x17\x26\xbe\xc7\xf3\x80\xaa\x4c\x3c\x29\xfc\x81\x71\xb7\x66\xe2\xff\x4c\x7c\x15\x10\x7d\x65\x32\x5d\x2a\x83\x2e\x7d\xf3\xaf\x56\x2d\x39\x55\x9c\xc4\x2e\x7e\x62\xb7\x83\x9e\xd1\x5c\x0c\x48\xba\xe9\x8f\x87\x98\x9f\x15\xc9\x9f\x79\xe7\x01\xb2\xb8\x39\xeb\x4b\x71\xce\xc6\x38\x6b\xae\x3e\x91\xb7\x00\x00\x00\xff\xff\x31\x08\x8d\xee\x34\x02\x00\x00")

func templatesGoRpckitGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesGoRpckitGoTmpl,
		"templates/go/rpckit.go.tmpl",
	)
}

func templatesGoRpckitGoTmpl() (*asset, error) {
	bytes, err := templatesGoRpckitGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/go/rpckit.go.tmpl", size: 564, mode: os.FileMode(420), modTime: time.Unix(1538655854, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGoRpckit_boilerplateGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5b\x6f\x6f\xdb\x38\x93\x7f\x2d\x7d\x8a\xd9\x00\xd7\x93\x1a\xd5\x4e\xdc\xb4\xcd\xba\x71\x0f\x4f\xd3\xf4\x2e\xb8\x3e\x6d\x90\x66\x6f\x5f\x04\xc1\x41\x96\x28\x9b\x88\x44\xfa\x24\xda\x4e\x90\xe6\xbb\x1f\x86\xff\x25\xcb\x4e\xda\xdb\x7d\x71\xc5\x83\x67\x2d\x72\x48\xce\xfc\xe6\x0f\x87\x43\x46\xdc\x2f\x08\xd4\x8b\xec\x9f\xa4\x69\xd2\x19\x01\xca\x04\xa9\x8b\x34\x23\xf0\x10\x06\x97\x17\xa7\x67\x2c\xe3\x39\x89\x2a\x78\x59\x29\x8a\x18\x48\x5d\xf3\x5a\x76\x9e\x7f\x8a\x62\x58\x52\x26\xde\x1e\x85\x8f\x61\x68\xe6\x3a\x4d\xcb\xf2\x3f\x52\x96\x97\xa4\xde\x98\x0f\xfb\xa2\x8a\x88\x39\xcf\xcf\x3f\xe9\xb1\x09\xf8\xd3\x3b\x66\x70\xce\xe1\x10\x5e\x6e\xfb\xa7\x57\xd4\x23\xa1\x11\xf5\x32\x13\xb8\xce\x74\x59\x80\xfa\x77\x7d\x33\xbd\x17\x24\x0c\x4a\xc2\x74\x0b\x65\x22\x0c\x16\xbc\x71\x9f\x30\x1c\x42\xc1\x6b\xa8\x49\x9a\x53\x36\x0b\x83\x2f\x69\x23\xce\x50\x48\x2d\xea\x63\x18\x16\x4b\x96\x01\x23\x6b\xcd\x59\x94\xa5\x8b\x34\xa3\xe2\x1e\xc7\xc7\x96\x79\x5c\xbb\x82\xf1\x04\x5e\xe8\x86\x87\x30\x40\x66\xc6\x50\xa5\xb7\x24\x52\xcc\x24\x70\xb4\x6f\x86\xc7\x49\x18\x20\x6f\x63\x38\x4a\x90\x0d\x24\x83\x9a\xf3\x4a\x32\x54\x12\x36\x13\x73\x58\xd4\xa4\xa0\x77\x61\x80\x5c\x3f\x8b\xf0\x31\x0c\x6a\x22\x96\x35\x83\xca\xf2\xae\x19\xfa\x5c\xf3\xea\xe3\xbd\x20\x4d\x54\x35\x33\x8d\x4e\x0c\x91\x11\x20\x51\xf2\x3c\x84\x01\x2d\x70\x56\xa4\x8a\xe1\x03\x1c\x61\x53\xa0\x97\x19\x4f\x90\x2a\x9a\x52\x96\xd6\xf7\x83\x8f\x74\x76\xc6\x72\x9a\xb2\xc1\x1f\x94\x89\xd7\x23\x39\x24\x0e\x83\xf6\x0c\x13\xc3\x23\xce\xb3\x89\x91\x41\xa9\x99\x25\xf2\x4b\x42\x62\x46\xab\x26\x2d\x3c\xfe\x7e\xc4\xff\x33\x12\x26\x7a\xe6\x50\xb6\x3b\xd1\x19\x2d\x13\x38\xb0\xf2\xb7\x2c\x58\x21\x10\x6b\xf9\xa5\xc5\x20\x47\xd5\x60\xba\x2c\xae\xc7\xd5\xa0\x24\xec\x26\x0c\x36\x04\xbc\x58\x0a\x2d\xe3\x34\x91\xa6\x8b\xd2\x22\x31\xca\xab\x97\x9d\xf6\xaf\xf8\x67\x4d\x05\xf9\xaf\xb4\x46\xe0\x56\xda\xec\x25\xce\xd5\x60\x56\xf3\x75\xf4\x7b\x1c\x06\xc3\x21\x45\x2e\x0e\xc2\x00\x75\xba\x42\xd0\x0e\xee\x8e\x0f\x24\x64\x8a\x35\xc5\x19\x4c\x00\xd9\x8e\x56\x31\xfc\x90\x14\xb2\xbf\x24\x6c\x7f\x3f\x0c\x82\x15\x7c\xf8\x30\x81\x77\x61\x80\xf3\x61\xcb\x63\xb8\x65\x74\x68\x47\x6d\x67\xf9\xbb\xa8\x29\x9b\x45\x2b\x74\x2e\xca\x66\x92\x65\xf5\xf3\x8b\x35\x06\xd4\x93\x9a\xcd\x97\x52\xc9\x18\xf9\xc4\x71\x1c\x5a\x81\x5b\xed\x61\x90\xf1\xc5\x7d\xe4\xb1\x39\xbe\x49\xc0\x72\x08\xfb\x13\xf0\xe9\x77\xf0\xfb\x7a\xf4\x91\x1a\x84\x5f\x8f\x7c\x84\x8f\x62\xab\xd1\x2f\x54\x88\x92\x6c\x28\x75\xdb\xf2\xfb\x13\x38\xda\xb1\xe4\xdb\x23\xb7\x64\x5b\xa9\xc7\xbb\x97\x7c\x7b\xb4\x53\xe2\xe3\xfe\x35\xe5\xcc\x8c\x90\x9c\xe4\xbe\xb3\x2a\x4e\x75\xfb\x07\xe5\x3b\x38\xb9\xec\x0f\x86\x43\xf8\xca\x05\x10\xc6\x97\xb3\x39\x34\x0b\x8c\xc7\x29\xbb\x5f\xcf\x49\x4d\x12\x58\x13\xc0\x81\x20\x38\xa4\x65\xc9\xb3\x54\x90\x81\x0a\x5c\xd2\x2b\xd2\x5b\xf2\xbd\xa4\x19\x89\x46\x2f\xb3\x74\x61\xa6\xdd\x07\xb5\x18\xba\xba\xd4\xde\x74\x59\x24\xda\x85\x0e\xb4\x0f\xc5\xc6\x72\xd1\xe8\x96\x05\xda\x62\xaf\x4c\x97\x24\xcd\xb5\xa5\xc5\xa0\x4d\x23\x51\xc1\x57\xf2\xbf\x92\x1f\xca\x45\x91\x56\x9b\x58\x2c\x25\xc7\x9e\xdf\x26\xe8\xef\xda\x53\x5c\xf8\x9e\x60\x67\x68\x63\xc5\xde\x5e\xa2\x1a\x1e\xc3\x4e\x2c\x5b\xa1\x65\x4a\x14\x17\xbc\xd9\xd7\x7d\x1f\x14\xa8\x3d\xb3\x52\x3e\x38\xfb\xf6\xb9\x3d\xb1\x69\x7b\x0c\xa5\x87\xb8\x78\x22\xe7\x84\x71\x6b\xee\x1b\xd4\x33\x36\xef\x9b\xc0\x18\xda\x08\xa2\xc4\x47\x14\xe2\x04\xa5\x42\xc8\x56\x69\x0d\x67\x75\xfd\x6d\x45\xea\xa2\xe4\x6b\x25\x18\xaf\x9b\xc1\x57\xb2\x8e\xf6\x6c\x33\x65\xb0\x92\xd0\xec\xc5\xdb\x60\x36\xd0\x41\x64\xf6\x5e\x0f\xe6\xb4\x86\x3b\xb3\x9f\xcb\xaf\x46\x7e\xa9\x80\xa4\x82\xd3\x7b\x78\x0f\x74\x7f\x5f\x82\x62\x01\x3b\x6c\x61\xb5\x0d\x2c\x23\xe0\x81\x03\x4b\x86\xf2\x69\x07\xab\x1b\x89\x37\xce\xbb\xaf\x16\x99\xc2\x89\x8b\x84\xd8\x40\xe1\x03\xfc\x0e\x3f\x7e\x40\x44\x61\x32\x81\xdf\xe1\xc5\x0b\x98\xc2\x07\x38\x54\xd6\xde\xe5\xc0\x43\x4e\xf6\x3a\x3e\x3a\x3d\xfe\xc6\x72\x07\x3f\x34\x14\xd1\x34\x3e\x39\x69\x94\x2e\x14\xcd\x1d\xfc\x98\xd8\xce\x17\x07\x77\xef\x8a\x18\x4e\x4e\xa0\x09\x83\x40\xaa\xf4\xdd\x4e\x4b\x3f\x57\xf8\x6f\xc0\x7f\xb7\xd5\xca\x35\x4b\x6a\xc1\xbb\x58\x59\xf1\xd6\xf9\x3f\x72\x5e\xe2\x02\x53\xce\xcb\x5f\xf5\x22\xbd\x62\x91\x96\x0d\x71\x4e\xa3\x5b\x57\x08\xfa\xa1\x35\xce\x7e\x2e\x54\x24\xd6\x76\xf6\x7a\xe4\x33\x62\xed\xe6\xe8\x27\x7c\xec\xa0\xed\x62\x77\x28\x47\x5f\x70\xed\x04\x73\x4c\x1b\xf4\x62\x37\xb1\xe7\x75\x47\x56\x9a\xbb\x27\x04\x51\xf1\xbd\xd7\x61\xac\x20\xc7\x7f\x93\x20\xde\x16\xe1\x04\x39\x6e\x09\x72\xfc\x6c\x41\x3e\x97\x3c\x95\x82\x14\xf8\xa3\xad\x92\x65\xc7\x36\xb4\xf6\x76\x98\xc6\x81\x35\x0b\x97\x6d\xa6\x62\x3e\xf8\xac\x26\x2f\x6a\x5e\x4d\xa9\x68\xa2\x65\xfc\x04\x5b\x9f\xf8\x72\x5a\x12\xcb\x57\x1b\xe1\x2e\x5f\x5a\x19\xbf\xca\xd7\xdb\xa3\xe7\xf3\x75\x2e\xe1\xef\x73\xd4\xad\x4c\xb5\xfc\x74\xe9\xfc\x54\x1e\x53\xd6\xb4\x26\x57\xf8\x43\x07\xd8\x30\xe3\xac\x11\x10\x85\x81\xe9\x51\x0e\x09\xf6\x9f\x1d\x21\x93\x42\xf3\xf5\xf6\x68\x4a\x3d\x22\x9f\xea\xd0\x51\xa9\x4c\xe9\x13\x29\x69\x45\x05\xc9\x7d\xaa\x91\xa3\x7a\x3d\xda\x3a\xd7\x9b\xd0\xee\x21\x6b\xdb\x1e\x83\xdd\xa6\xd5\x36\x25\xf3\xc1\x35\x15\xd9\x1c\xd6\xf8\x3b\x4b\x1b\x27\xa9\x92\x67\xec\xed\x93\xed\x9e\xbd\x0e\xbd\x94\xac\x8f\x5c\x76\x74\xa9\x3b\x12\xf6\x8d\xeb\x90\x74\x67\x90\xd2\xf7\x8d\x93\x1d\x7b\x61\x90\x93\x22\x5d\x96\x92\x64\x91\x32\x9a\x45\x7b\x4b\x76\xcb\xf8\x9a\xc9\x29\x50\xab\x7b\xb1\x1f\xea\xcd\xf8\xcf\xbc\xbe\xa8\xf9\x82\xd4\xe2\x1e\x3f\x23\x81\x87\xda\x5b\x2a\x46\x03\xbf\x39\x76\x70\x3b\x14\x85\x45\xd1\x0c\x51\x88\x7b\x6c\x6e\x91\xae\x33\x0c\x77\x81\x9e\x41\x0a\xf9\x0e\xad\x34\xf5\x1e\x62\x89\xfb\x26\xed\x73\xa7\x95\x2e\xd7\x43\x2c\xe1\xed\xd0\xaa\x28\xb0\x9d\x87\xed\xaa\x58\x68\x48\x61\x53\x1f\x1b\x3e\x7d\xf1\xf1\xfb\x2d\x5d\x44\x22\x9d\xd9\x74\x5d\xba\xb5\xc9\x7e\xd0\xad\x75\x79\xc3\x58\xb5\x66\x43\x8e\x79\x01\x51\x74\x88\x3b\xfd\xeb\x18\x5e\xc1\x61\x1c\xef\x30\xf9\xff\x56\x41\x62\x73\xb3\xed\x37\xf9\x0e\xb9\x0d\x29\x4f\x99\x7c\x67\x9c\x71\xcf\x6d\x96\xde\x21\xb7\x61\xde\x6d\xee\x5b\x53\x0b\x79\xd8\xb9\xf8\x78\x95\xce\xa2\x82\x92\x32\xff\xba\xac\xa6\xa4\xb6\x25\x1c\x6b\xcb\x2e\x56\x3c\x74\xcf\x84\xad\x81\x0a\x46\x9b\x64\xd9\x61\xf1\xce\xe5\xb5\x80\x7d\x1c\xac\xd2\x72\x49\xfc\x83\x2a\x2d\x74\xdb\x6f\x13\xd8\xdb\xd3\x5b\x73\xbf\x18\xc9\x36\x8c\x63\x37\xc8\x9c\x85\x71\xca\xed\x66\xa6\xe7\x97\x49\xd8\x76\x2e\x31\x37\xdb\xe0\x51\x66\x5b\xcf\x64\x53\x21\xea\x71\xa7\x21\x3e\x7c\x92\x33\xb5\xaf\x6d\x67\xcd\x1d\x63\x7d\xde\x0e\x9e\xc9\x97\x34\x68\x8f\x2d\x65\xc8\x5a\xc7\x0a\xba\xe7\x70\xf8\xb7\xf1\xb7\x0d\xb7\x9f\xe3\x50\xa5\x52\xdb\x79\xd4\x19\xd6\x2f\x73\x29\xfd\xd5\x63\x52\xf9\xa9\x9f\x5f\xc9\x1c\xe6\x99\xdc\xea\x0c\xeb\x09\x76\xff\x72\xa5\xfb\x69\x57\x0f\xbb\x3b\x2a\xbb\x2a\x61\xba\xbc\x38\x95\x39\xb4\xad\x13\x7b\x29\xd3\xbf\x13\x46\x6a\x9a\xa9\x1c\xdb\xa7\x94\xa9\xd2\x15\xad\x08\x5f\x8a\xbe\xde\xc3\x30\xb8\xa8\xb9\xe0\x19\x2f\x55\x77\xab\x77\x84\x49\x4f\x6b\xf1\x76\x01\x5b\xef\x0d\xb2\xee\xed\x06\xfa\xb5\x6f\x35\xc8\x95\xa2\x69\x8e\x79\x95\x47\xab\xe6\xd0\x61\xca\xa9\x8d\xc0\x4b\x33\x3a\x86\xce\xfc\x38\x8f\x89\xce\x03\x9a\x6f\x19\x24\xff\xd3\x4a\xcc\xec\x18\x5b\xc6\xde\x85\xb9\x12\xe1\x13\x6d\x32\xce\x18\xc9\x04\xc9\x4d\x0d\x1f\x17\x8b\x32\x78\x79\x79\x71\x7a\xaa\xfa\x28\x67\x6a\x23\x31\x4c\x7a\xb0\x39\x12\x0f\x86\xe6\x9e\x65\x83\xcb\x3f\xff\xb9\x14\xe4\x2e\x0c\xec\x0a\x88\x0d\x86\x42\xd5\x64\xd3\x50\x46\xc4\x00\xa7\x09\x03\xce\x1c\x43\x7d\xbc\x85\xc1\x5c\xfd\x50\xf5\xfc\x2a\x5d\x5c\x2b\x5b\xb9\x69\xdf\x43\x84\xc1\x3a\xa5\x82\xb2\x19\xb6\x35\x3e\x5d\x36\x4f\x99\x75\x19\x53\x6b\xa9\x17\xd9\x45\x4d\xd2\x6a\x5a\x62\x2a\xac\xca\xc4\x0f\xc7\xa3\x04\x8e\x0f\x12\x78\xfb\x2e\x81\x77\x6f\x12\x78\xf7\x3a\x81\xe3\xa3\x04\x4f\x1c\xea\x7f\x87\x8f\x30\x1c\x5e\x26\x17\xc9\x69\xf2\x9f\xc9\x79\x72\x05\x83\x01\xac\x48\xdd\x20\x14\x87\x4a\x65\x5f\xc9\xba\x05\x51\x24\xe5\x36\xf2\xc6\x10\x75\x41\xb6\x00\xcb\x54\x43\xd6\xcd\x5b\x14\x0f\xb2\xfc\xa6\x41\x19\x23\x06\xa2\x5e\x92\x44\xb7\x8e\x2d\xa4\xf8\x85\xad\x06\xae\xb1\xc6\xeb\x96\x44\x5b\x41\x93\x95\x77\x1f\xb7\xf1\xc6\x80\x16\x7a\x48\x8f\xc7\xae\xe1\x10\x1a\xc2\x72\x10\x73\x02\x8b\x9a\xa4\xd3\x92\x84\x01\xb3\x87\xa6\x6c\x80\xcc\xa8\x48\x11\x79\x48\xef\x3a\xd5\xc9\x6a\xfe\x0b\x63\xec\x0f\x34\x1f\x83\x1f\x02\xf4\xe9\x6c\x0c\x45\x25\x06\xdf\x17\x18\xd1\x8b\x68\xef\x94\x2f\xcb\x1c\x18\x17\xb0\xc6\xb5\x24\x2f\xb8\xd0\x00\x3e\x11\x91\x52\x94\xe7\x5f\x56\xaa\x26\x18\xab\xbb\x03\x5a\x00\xc3\xd5\x4b\xc2\x5a\x9c\x3d\xc1\x4a\x2b\xa2\x58\x5e\xbc\xf5\x25\x1c\x84\x09\x5a\x23\x17\x8a\xd8\xb1\xb3\xf7\xa8\x70\x9b\x71\xc8\x06\x35\x49\xf3\x2f\x9c\x2f\xbc\xf3\x64\xd6\x39\xa9\x76\x5d\x11\x73\xdb\x8a\x0b\xf2\x8f\x3c\xc7\x00\x80\xd6\x84\x3f\xbd\x10\xa0\x21\xf7\xc9\x76\x4d\xe7\x78\x50\x73\x64\x84\xae\x48\x6e\x3d\x62\xac\x53\x95\xd0\x2f\x11\xdb\xdb\xad\x83\x04\xde\x1c\x8e\xe2\x30\xe0\x45\xa1\xef\x33\x2a\xca\x30\xdb\xc4\xaf\xd1\x9b\xb7\xca\x42\x6e\x69\x59\xc2\x34\xcd\x21\xb3\x0b\x37\x32\xcd\x37\x01\x27\x36\x35\xc6\xa9\x1a\x59\x93\x8c\xaf\x48\x1d\xc5\xef\x65\x8b\x67\x23\x41\x36\x20\x2c\x8f\x7e\xd6\x3c\x96\x4c\x39\x43\xae\xcf\x00\x94\x79\x82\x6b\xd3\x98\xa6\x79\xfc\x18\xeb\xbb\xa5\x28\x0e\x55\x29\x54\x97\xd4\x91\x1a\x8a\x9a\x57\xd2\xd2\x9d\x1c\x8a\x6d\x14\x5f\xdd\x7b\x45\xb6\x0e\x1f\xd8\x5a\xf8\xf5\xf8\xe0\x06\x1b\x90\x4a\x62\x14\x60\xf0\x00\x34\x03\x1c\x5c\xd4\x44\xe2\x9c\xa5\x0b\x35\xfa\x95\x9d\xe8\xbd\xea\x3c\x01\x83\xaa\x9c\x78\x38\x44\xd9\x2e\x50\xb4\x92\x45\x7b\xb3\x9a\xaf\xf1\x2c\x24\xf9\x64\x1b\xa5\x7f\xfc\xce\xb1\x97\x91\xf5\x47\xa5\x43\x59\x9f\x37\x8c\xef\xf7\x2d\xd1\x3b\xd5\xb2\xc1\xcd\x66\x4a\x66\x94\x31\xfc\xc5\x0b\x9c\xa9\x20\xf5\x7b\x33\x24\x97\xd9\x87\x6e\x05\x73\xf3\x29\x7b\xf5\xea\x9b\x77\x0c\xfa\x86\x41\x2f\x1f\xdb\xda\xac\xbc\x68\x50\xa3\x12\x89\x22\x2f\x8a\xb1\xbc\x66\xd0\xc8\xaa\xbe\xeb\xb1\x01\xeb\x15\x2f\x8a\x2e\xce\x98\xa7\x74\x83\x11\x2e\x83\x03\xae\xcd\xc0\xb1\x61\x43\xce\xee\xd4\x76\x00\x63\xab\x89\xfd\xea\x46\x69\x4b\x1e\xa9\x4c\xa5\xcf\x37\x49\x46\xcb\xd8\xd5\x94\xf5\xe2\x9b\x41\xee\x17\x0d\x58\x99\xad\xbe\xb6\x56\x86\xe8\x8c\xb0\xd7\x9c\x65\xa4\xeb\x72\x14\x06\xd6\xa8\x51\x5f\xd9\x9c\x64\xb7\xf2\x5a\x79\x51\x93\x4a\x05\x6f\xc9\xf4\x6f\x1b\x81\x40\x99\x85\xbe\xe8\x75\xea\x30\x66\xbf\x11\x41\x15\x31\x86\x89\x66\x70\xf6\x3f\xcb\xb4\xf4\x49\x9c\x42\xd1\x00\xbb\xe3\x6f\xec\x0c\x52\x95\xfb\x9b\x2b\xe8\xde\x0d\x26\x27\x72\x47\x54\xbd\x8f\x40\xcc\x11\x2b\xd8\x02\xfb\x96\x58\x7e\x35\x27\x50\xd0\xba\x11\x8a\x7d\x30\xcb\x38\xff\xe7\x62\x4e\x6a\xf4\x2b\x58\xa7\x8d\x74\x14\x6c\x25\x77\x0b\x95\xe9\xa8\x42\x87\x0d\xfa\x7b\x8f\x8e\x61\xad\x09\x63\xe4\x96\x4b\x1b\x10\xd0\xbc\x6b\x92\xde\x86\x96\x46\x35\x0f\x87\xb0\x48\xeb\xc6\x3e\x81\x68\xe4\xed\x4b\x33\x33\x77\xe2\x32\x36\x77\x2f\xfe\xdb\x6e\x43\x0b\xa8\x9a\x59\xcb\x18\x3d\x80\xd5\xbd\x3a\x02\x35\xe3\xc2\xbc\x7d\xa8\x9a\x99\xf2\x48\x1f\x4c\xcb\xdf\xa3\xb9\x88\xdf\xb1\xbf\xb4\x27\xf3\x0e\x2c\x0f\x61\x20\x5c\x71\xb5\x99\xb5\x4a\x27\x08\xc7\x7a\x9e\x0a\xb8\xa5\x2c\xc7\x40\x63\x5e\x5d\xd0\x06\xa8\xe8\x4b\x1e\x7e\x42\xbf\x6e\xaf\x96\x51\xdd\x4c\x2d\x93\xda\xb4\x91\xaa\x54\xea\x57\x17\x6c\xe8\x5d\xd8\x46\x59\xc6\xab\x0a\xdd\x4f\x8f\x18\x28\xc5\x1a\xa5\xca\xdb\xc0\x6e\x65\xef\x70\x2c\x9f\x70\xc8\x47\x30\x90\xa5\x65\x89\xac\xa6\x65\x79\xfe\xe9\x69\xd9\xa9\xe2\x85\x4a\x00\xc4\x9c\x36\x72\x82\x7f\x7b\x7e\x58\x79\x9e\xfc\x92\x1d\x6d\xdc\x06\x0b\x6c\xd3\xe2\xb5\x03\x9a\xc9\x68\x7e\x82\x7f\x9b\x04\x4d\x09\x82\x87\x53\x93\xfc\x2f\x97\xc2\x32\xd6\x27\x09\x9c\x96\xbc\x21\x7e\xfe\xd1\x23\x9c\xcb\x98\x13\x28\xf8\x92\xe5\x6a\xcf\x30\x59\xf4\xb5\x13\x5d\x6f\x05\xbf\x29\xaa\x9f\x64\xbc\x15\xd6\xff\x70\x85\x4d\x49\xaa\x63\xb7\x5b\xaa\x37\x84\x9b\x37\x55\xcf\x56\x81\xb6\xbf\xbf\x55\x01\xf6\xa1\xd7\xaf\xc3\x5f\x93\x66\x59\x0a\x14\x48\x83\x3e\xe8\xbe\x22\x4b\x40\x47\x24\x5a\x80\xa6\xf6\xb9\xaf\xc9\xa2\xbc\xc7\xf1\xde\xf3\xad\xc3\x83\xd1\x51\x6c\x3b\x5b\x85\xa0\x51\xac\x0e\x4c\xce\x43\x5d\x80\xde\xa4\x56\x6e\x2b\xb1\xc5\x9f\x34\xef\x27\x53\x6c\x0d\xf4\x93\x39\xbd\xb2\x69\xd2\x4f\xec\xe4\xa8\x58\xe1\x8d\xe7\x05\xd7\xe0\x32\x43\x1d\x65\x65\x14\x19\x8d\xfb\x78\xfc\xff\x12\x47\x9e\xab\xfe\x6c\x70\xf9\x85\x67\xb7\x91\x7c\x66\x32\x6f\x39\xa1\x7f\x32\xbd\x56\x72\xdf\xa8\x11\x7f\xb0\xd2\x8c\xf9\x6b\x5c\xd2\x49\x55\xe0\xde\x93\x82\x5e\x5b\xca\x22\x73\x25\x79\x02\xc0\x0f\x9c\x51\xfa\xab\x36\x8d\x5e\xa1\xe6\x70\xf2\x0a\x75\xe3\x54\xba\x73\xbf\x2c\xf9\x4c\x55\x77\x5a\x25\x17\x94\xa8\x95\xf4\x9f\x5d\x5e\x7e\xbb\x54\x59\xde\x40\x57\x83\x76\x1e\xf3\x90\xc3\x08\x25\xf9\xcc\xeb\x4b\xe9\x25\xea\xc9\x80\x8b\x34\xee\x81\x66\xf7\xc5\x26\x8e\xfd\x47\x3d\x6b\xbc\xe7\x9a\xde\x15\xb9\x7b\x4f\xd8\xe2\x16\xbd\xa4\x26\xa9\x20\x0e\x2e\x53\x78\xd1\x86\x8b\x9a\xd5\xa5\xd8\xc3\xd1\xeb\x23\x69\xaf\x57\xdf\x3e\x7d\x1b\x83\xbe\xe7\x31\x20\x0f\xf4\x4b\xcb\x4d\xa7\xee\xd6\xc3\xdd\xed\xe6\x70\x08\x54\xfc\x6b\x03\x69\x7b\xef\xad\x7a\x3d\xba\x1d\x03\x94\x73\x6f\xcc\xee\xc5\x64\x24\xb6\xbb\x1a\xc6\x81\x36\xa5\x01\x30\x6e\x4d\x8b\x74\xe6\x20\xa2\x01\xf5\x22\x42\xf5\xc4\x3d\xf7\x2f\x15\x45\xfe\x60\x98\xd2\x83\xe0\x40\xe4\x2a\x0a\xd0\xb4\x9e\x75\xab\x21\x26\xe8\xa0\x07\xb5\x8c\xa4\x87\x09\x1d\xb1\xaa\xd8\x2b\x00\x89\xe5\xc2\xa9\x39\x65\x39\x08\x5a\x91\x3a\x44\xe3\x37\x25\x83\x56\xf5\x28\x81\xc3\x38\x0c\x24\x11\x12\xe0\x8f\xc1\x57\xb2\xbe\xc2\x86\xe8\x0d\xbc\x54\x2d\xdf\x49\xc6\x19\x2a\x22\x1b\x98\xb8\xd0\x1f\x09\x60\x02\xd9\x1c\x3b\x5d\x30\xd8\x28\x2e\x64\x18\x83\xa2\x6c\x8e\x2e\x2a\x17\x1e\x7c\x17\xaa\xf2\xe2\x4d\x1f\xe4\xa4\x24\x82\x44\xed\x65\xac\x7f\x4b\x5a\xb7\x86\x2a\x12\xf8\x15\x30\x29\x3f\x5f\x91\x1a\x31\xb7\x07\x85\x86\xe6\x24\x0c\x90\xe8\xcc\x1c\x44\x2d\x84\xb4\x00\xd3\xb1\x5d\xef\x9a\xc2\x02\x8e\xcc\xd9\x48\x24\xb7\x0e\x9c\xbe\x24\x99\xcb\x3b\x31\xd7\x1e\x4f\xe0\xe4\x55\x36\x1f\xdb\x9d\xf5\xea\x7e\x41\x76\x6c\x18\xdb\x36\x04\x19\xbe\xa3\xb8\xfd\xac\xeb\x97\x0c\xf2\x9c\xad\xd2\x92\xba\x94\xbb\xe0\x75\x95\x0a\x7b\xc0\xea\xdb\x29\xfa\xeb\x77\x32\x17\xd5\xcc\xb4\x65\x93\x47\x22\xf9\x7c\x4b\xe2\x70\xf2\x4a\x29\xfb\x74\xfc\x94\x3b\xf9\x17\x09\xde\x59\x90\x56\x24\x07\xbe\x14\x76\x1b\x50\xcf\xc7\x17\xe5\xfd\xde\x53\x47\x1f\xa5\xe4\xd6\xa1\xc7\x5e\x35\x3c\x84\x81\x3a\x5c\x6a\x3d\xe8\x67\xca\x5b\x6b\xa7\x92\x78\x57\x8c\xf8\xbf\x16\x4c\x8d\x4a\x38\xf3\xd0\xdf\x59\x34\x55\x2c\xe9\xc3\x97\xb3\x91\x5e\x7e\xb6\x64\x10\xe6\x2f\x11\xcc\x29\xba\x58\x96\xe5\x3d\xe2\x26\xfa\x93\x86\xce\xa3\xef\x5d\xe0\x6b\x86\xa4\x43\xb8\xfa\xcc\x8e\x01\x48\xb3\xb1\xe7\xba\xd0\xa0\x02\x8a\xef\xfe\xb4\xd0\x2a\x52\x87\x7e\x85\x83\xfb\xb6\x85\x53\xdd\xea\x41\xa4\x93\x1a\xff\xc2\x43\xf9\x5e\xb7\xd4\xd9\xba\x12\x99\xe8\x57\x89\x41\x1e\x65\x4a\x27\xcf\x38\x7e\x37\x44\xe8\x0a\x7f\xd4\xb3\xd5\xeb\x34\xbb\xf3\x87\x1c\x5a\xf2\xbe\x83\x0f\xd8\xd4\xdc\xfd\xb5\x81\xad\xe7\x31\xf5\x48\xd9\xbd\xb4\x1f\x0e\xe1\xbc\x50\x07\x90\xf4\x96\x40\x81\x7e\x9c\xc0\x8c\xae\x08\xa4\xa0\x0e\x3e\xd2\x12\x06\xfd\xc5\x60\x5b\x05\x6e\xa1\xa2\x9e\x84\xe8\xc2\x52\x5d\x5f\x71\xfe\x25\xad\x67\xc4\x2b\xdc\xba\xb7\x60\x5e\xa9\x9a\xa1\xf2\xff\x37\x00\x00\xff\xff\x52\x11\x2e\x93\x02\x33\x00\x00")

func templatesGoRpckit_boilerplateGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesGoRpckit_boilerplateGoTmpl,
		"templates/go/rpckit_boilerplate.go.tmpl",
	)
}

func templatesGoRpckit_boilerplateGoTmpl() (*asset, error) {
	bytes, err := templatesGoRpckit_boilerplateGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/go/rpckit_boilerplate.go.tmpl", size: 13058, mode: os.FileMode(436), modTime: time.Unix(1538661250, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGoRpckit_client_methodGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\x4f\x8b\xdb\x30\x10\xc5\xef\xfe\x14\xd3\x40\x17\xbb\xa8\x86\x96\xd2\x83\xc1\xa7\xc4\x2c\x7b\xd8\x4d\x50\xd2\x73\x31\xf2\x38\x15\xd8\x92\x3b\x96\x02\xc5\xe8\xbb\x17\xc9\x7f\x90\xa1\x94\x42\x75\x92\x47\x4f\xf3\xe6\xf7\xac\xd6\x2a\x01\xa9\x80\x0f\x57\xa4\x07\xd2\xb1\x93\xa8\x4c\x06\xd3\x04\xf9\x5b\xdd\xa3\x73\xa9\xdf\x53\xad\xee\x08\xf9\x8b\x1a\xac\x01\xe7\x12\x58\xd6\x2a\x03\xe7\xc2\xfe\x96\x3f\xeb\xdb\xaf\xc1\x7f\xb3\x64\x16\x7c\x04\x54\xcd\x7a\x27\x83\xb8\xdd\xd9\x9a\xff\xec\xe7\x17\x12\x01\xbf\x1c\x2b\x22\x4d\x6c\x71\x99\x92\xb0\x21\x1c\x6d\x67\x7c\x83\x97\x13\x83\x7e\xbc\xb3\xa0\x2e\x4a\x10\xb9\xc8\x45\xdd\x75\xa9\x21\x8b\x0c\x3e\x31\xb0\x52\x99\xaf\x5f\xd2\x39\x86\x57\x34\x3f\x74\x13\x4d\x93\x31\x78\x1a\xc3\x11\xc7\x9f\x16\x47\xf3\x3d\x3a\x9c\xfe\x16\x51\x2c\x2c\x62\x40\x16\x51\xef\xa0\x5c\x36\x4f\x2f\xdb\x1d\x00\x94\x25\x7c\x86\x69\xbb\xf5\xa8\x09\x08\xd6\xa1\xc6\x41\xab\x11\x63\xb3\x4d\xd8\xa0\xd0\x0d\x86\x7c\x3c\x3a\xe5\xfc\x72\x3c\x85\x5a\xda\x8f\xf7\x6c\xd3\xc9\x76\x27\x7d\x57\x82\x92\x5d\x64\xb8\x86\x5d\xc2\x13\x0d\x22\x88\x26\xd9\x14\xf0\x8c\x0a\x49\xce\x85\x10\xb0\xa6\x02\xda\xde\xe4\xd7\x81\xa4\x32\x6d\x7a\x10\xda\x76\x0d\x28\x6d\x16\x83\x85\xab\x80\xf7\x8f\x03\x8b\x4d\x33\xb7\x73\x23\x34\x96\xd4\x56\xda\xbd\x93\x7f\x7a\x43\x9e\xf6\x8f\x99\x2c\x91\x47\x95\xc8\xcb\xcd\xf9\x7b\x84\x8b\x27\xe8\x54\x7a\xb8\x9e\x5f\x2b\xa8\x38\x3f\x73\xe0\xd5\xed\x1b\x7f\xab\x4e\x07\xb6\xfb\x3f\x59\x12\xb5\x71\xc9\xef\x00\x00\x00\xff\xff\x38\x72\x84\xc5\x59\x03\x00\x00")

func templatesGoRpckit_client_methodGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesGoRpckit_client_methodGoTmpl,
		"templates/go/rpckit_client_method.go.tmpl",
	)
}

func templatesGoRpckit_client_methodGoTmpl() (*asset, error) {
	bytes, err := templatesGoRpckit_client_methodGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/go/rpckit_client_method.go.tmpl", size: 857, mode: os.FileMode(436), modTime: time.Unix(1538661100, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGoRpckit_headerGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8c\xb1\x6e\xc2\x40\x0c\x86\x67\xfc\x14\xd6\x0d\x15\x30\x80\x54\x55\x1d\xba\x66\x2e\x42\xed\x13\x5c\x8c\x49\x2c\x38\x5f\xe4\x38\x6d\xa3\xe8\xde\xbd\x0a\xe9\x00\x9d\xfe\x5f\x9f\x3f\xff\x5d\xa4\x4b\x6c\x18\xa7\x09\x77\xc7\xa5\x1f\x62\x62\x2c\x05\x40\x52\x97\xcd\x71\x0d\x88\x88\xa1\x1e\x9d\xfb\xb0\x74\x56\xca\x27\xd1\x66\x5f\x8b\x46\x1b\x03\xac\x02\x9b\x65\xeb\xe7\x76\x4e\x3e\x87\xe4\x3f\x39\x45\x6f\x67\xa0\x7c\xe3\xfd\xa8\x34\xa7\x4b\xe2\x00\x8b\xd2\x88\x5f\x63\xbd\xa3\x9c\xf6\xfc\x13\xfb\x36\x76\xbc\xb7\x8e\x2e\xe2\xcf\x01\x36\x00\x3e\x76\x8c\x9f\x6c\x5f\x6c\xef\xec\x6d\x3e\xe1\x20\xea\xaf\x2f\x0f\x97\xea\x2a\xac\x8e\xbd\xdb\x40\x8e\xd3\x6d\x99\x70\xfb\x71\xac\xaa\xac\xca\xe4\x92\x15\x0a\xc0\x79\x50\xc2\x03\x7f\xdf\x7f\xad\xff\x8b\x1b\xdc\x3e\xac\x4e\xb0\x32\xf6\xc1\x14\x9f\xee\xf9\x44\x6f\x48\x05\x0a\xfc\x06\x00\x00\xff\xff\xb4\x53\xd6\xc8\x48\x01\x00\x00")

func templatesGoRpckit_headerGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesGoRpckit_headerGoTmpl,
		"templates/go/rpckit_header.go.tmpl",
	)
}

func templatesGoRpckit_headerGoTmpl() (*asset, error) {
	bytes, err := templatesGoRpckit_headerGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/go/rpckit_header.go.tmpl", size: 328, mode: os.FileMode(436), modTime: time.Unix(1538661162, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGoRpckit_rpccallGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\x31\x6f\xb3\x30\x14\xdc\xf3\x2b\xee\x5b\x3e\x41\x44\xc9\x52\x75\x20\xca\x14\x86\x66\x48\x13\xa1\x4a\x1d\x2b\x0b\x1e\x04\x15\x0c\xb5\x4d\x3b\x58\xfe\xef\x95\x81\x00\x8e\xb2\x54\xaa\x27\xf3\xee\x9e\xdf\xdd\x3d\xf2\x8e\xa7\xf0\x24\xd6\x92\xc4\x17\x89\x23\xa9\x4b\x93\xc9\x3d\xab\xaa\x67\xc6\xb3\x8a\x84\x8f\xe4\xbc\xb7\xdf\x5e\xdd\x63\x87\x18\x5d\xc9\xd5\xd3\x63\x80\x1a\xeb\x9a\xa4\x64\x05\xf9\x10\x6d\x7a\x1c\xee\xd0\x2b\x00\x90\xdf\xa5\x4a\x2f\x98\x9a\x34\xb4\x86\x60\xbc\x20\x84\xe3\x14\x18\xd3\x53\x53\x26\xc9\xa2\xe1\x21\x86\x31\x51\x5f\xb3\x87\x89\x42\x22\xda\x61\x90\x96\xd0\x67\x47\x52\xbd\x5b\xe2\x0b\xab\x09\xc6\x68\x33\x71\xcb\x1c\x24\x84\x65\xdb\xae\x30\x39\xef\x63\x4a\x9b\x8c\xbc\xda\xdf\xf6\xc8\xbf\x1d\x78\x59\x8d\xe2\xae\x67\xb3\xc1\xeb\x29\x3e\x45\x78\x13\xac\xb5\xb4\x46\x38\xb8\x20\xd5\x09\x6e\x1b\xa7\xf2\x3c\x72\xf6\x73\xea\x54\xdb\x29\x2b\x68\xa1\x4d\x83\x78\x06\x63\x82\xab\x30\x19\x0e\x61\xc8\x70\x41\xf3\x16\xcf\x1c\xf8\xf0\x8a\x23\xa1\xb7\xb3\x34\x1d\x38\xb0\xd6\x0f\xe3\x9c\xa9\xec\xdf\x86\x72\xd7\x7a\x99\xf7\x3b\x93\x45\x80\xe6\xc3\xca\x23\x21\x42\x6f\x5e\xa3\xbf\xb5\x75\xb7\x67\x11\xc9\xd0\xeb\xa0\xe6\xef\xa2\x1d\xc1\xff\xd7\xcd\xcb\xb6\xe1\x92\x9c\xd5\xdf\x8b\xdf\x19\xb0\x64\x47\xf8\x4d\x80\xc3\xed\x06\xc8\x28\x67\x5d\xa5\xe6\xbf\x73\x32\x98\x0c\x62\x5d\x8b\x37\xf6\xcc\xca\xac\x7e\x02\x00\x00\xff\xff\xba\x71\x6b\x29\x6b\x03\x00\x00")

func templatesGoRpckit_rpccallGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesGoRpckit_rpccallGoTmpl,
		"templates/go/rpckit_rpccall.go.tmpl",
	)
}

func templatesGoRpckit_rpccallGoTmpl() (*asset, error) {
	bytes, err := templatesGoRpckit_rpccallGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/go/rpckit_rpccall.go.tmpl", size: 875, mode: os.FileMode(436), modTime: time.Unix(1538661146, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGoRpckit_serializationGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x52\xc1\x6e\xd4\x30\x10\xbd\xe7\x2b\x1e\xb7\xb8\x2a\x3e\x00\xe2\x80\xba\x97\xb2\x5d\xd4\x0b\x44\x6d\x05\x47\x64\x25\x93\x60\x75\xe3\x44\x63\xa7\xa5\x18\xff\x3b\xb2\x93\x6e\x92\x15\x45\x48\xeb\xc3\x6a\xd6\xf3\xf2\xde\x9b\x37\x76\x4f\x3d\xc1\x12\x3f\x10\x7b\x8f\x52\xf5\xda\xa9\xbd\xfe\x45\x90\x05\x53\xad\x7f\x22\x84\xef\xde\x43\x7e\x56\x2d\x21\x04\x58\xc7\x43\xe9\xe0\xe1\x3d\x58\x99\x86\x20\x77\x9a\xf6\x95\x45\x08\x19\x00\xac\xd0\xb1\xbe\x93\x9f\xba\xbb\xa8\x12\x42\xe6\xfd\x6b\x90\xa9\x62\x19\xb2\xac\x1e\x4c\x89\xdc\xe2\xec\xff\xf5\x05\x6e\x8a\x8f\xd7\xdb\x5c\x60\xd0\xc6\xbd\x7f\x07\x9f\x44\x99\xdc\xc0\x26\xc9\x5d\x6f\x4f\x64\xbf\x32\x65\x57\x51\xde\xe2\xac\x25\x6b\x55\x43\x02\xc4\xdc\xf1\x3f\x66\x6e\xe5\x37\xd6\x8e\x8a\xcb\x71\xde\x5b\xc7\xda\x34\x08\x21\x3f\x18\x3a\x87\x95\x2b\xa5\xf4\xdd\x22\x8e\xc5\x14\x46\xef\x4f\xf1\xbf\xa5\x97\xfc\x27\x91\x07\xc5\xc8\x53\x15\x0f\x31\x8f\xdd\xc3\x8d\x53\xcd\x94\x6d\xba\x1a\x8d\xd6\x5d\x82\x61\xb3\x89\xee\x26\xa6\x09\x7d\x3e\x76\xd0\xca\x1b\x52\xd5\x57\xc5\xda\xb8\x5c\x1c\x10\xf6\x51\xbb\xf2\x47\xa2\x7d\x39\xc0\x78\x4a\x65\x69\x52\x9e\x73\xc3\xc5\x05\xde\x0a\xfc\x7e\x6e\x3c\x6a\xa6\xf8\x98\x76\x1d\x17\xdc\xf5\xc4\xee\x29\xfe\xcd\xb9\x2f\xef\xb5\x7b\x23\x8f\x16\x20\xc4\x87\x03\x7f\x32\xb3\x5a\xc2\xda\xf9\xf1\xee\xe6\x11\x8e\xd6\x14\x4f\x45\xb5\x1a\xf6\x6e\xcd\xae\xeb\x44\xf8\x6a\x03\xdd\xc9\xab\x2f\xbb\x45\x4e\xcb\xbc\x9f\x05\x8b\xcb\xdb\x7b\xdd\xe7\x4e\x35\x62\x85\x9b\x55\xc6\x6a\xfc\x9d\xc8\x37\x7f\x21\x5f\xbc\x9b\x19\x3f\x5d\x12\x73\x16\xb2\x3f\x01\x00\x00\xff\xff\x94\xda\xd6\x61\xe6\x03\x00\x00")

func templatesGoRpckit_serializationGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesGoRpckit_serializationGoTmpl,
		"templates/go/rpckit_serialization.go.tmpl",
	)
}

func templatesGoRpckit_serializationGoTmpl() (*asset, error) {
	bytes, err := templatesGoRpckit_serializationGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/go/rpckit_serialization.go.tmpl", size: 998, mode: os.FileMode(436), modTime: time.Unix(1538661236, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGoRpckit_server_methodGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\xcf\x6a\xc3\x30\x0c\xc6\xef\x7e\x8a\xef\x34\x9a\x91\x05\x76\xdd\xb5\x87\x6d\x87\xfd\xa1\xeb\x0b\x18\x47\xed\x02\xa9\x5c\x64\x65\x30\x8c\xde\x7d\x38\x4d\x20\x0d\xec\x54\x83\xc1\x48\x3f\xfd\x3e\x63\xeb\xef\x99\xf0\x45\xf2\x43\xf2\x46\xfa\x1d\xdb\x84\x8e\x95\xe4\xe0\x03\x21\x23\x67\x88\xe7\x23\xa1\x99\xbb\x66\x0e\x40\x69\x34\xef\xfe\x44\x30\xdb\x2c\xa8\x57\x3e\x0f\x3a\x33\x2b\x6e\x3c\xef\x9b\xe7\xb8\x2f\x99\x66\xf5\x24\x7a\x00\x71\x3b\xcf\x54\x58\xea\x3e\x06\xbd\xd1\x57\x16\x89\x94\x1d\xe5\x42\x54\x6b\xce\x9c\x3b\x0c\x1c\xb0\xa3\x63\x97\x94\x64\xf7\xb9\xdd\xfa\xbe\x7f\xf1\xdc\xf6\x24\x9b\x80\xfb\x52\x89\xcc\x14\xb4\x8b\x5c\x23\x5d\xbf\x58\x85\x3c\x2a\x43\x93\x48\xe7\xa9\xc7\x1a\x77\x69\x49\x2d\x94\xf9\x74\x29\x3d\x21\x59\x55\xe2\xc7\x5f\xf8\x8f\x46\x52\x19\x82\x4e\x21\xd3\xe8\xf5\x0d\x9c\xb9\xbf\x00\x00\x00\xff\xff\x34\xcf\x01\x2d\xc9\x01\x00\x00")

func templatesGoRpckit_server_methodGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesGoRpckit_server_methodGoTmpl,
		"templates/go/rpckit_server_method.go.tmpl",
	)
}

func templatesGoRpckit_server_methodGoTmpl() (*asset, error) {
	bytes, err := templatesGoRpckit_server_methodGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/go/rpckit_server_method.go.tmpl", size: 457, mode: os.FileMode(436), modTime: time.Unix(1538654648, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/go/rpckit.go.tmpl": templatesGoRpckitGoTmpl,
	"templates/go/rpckit_boilerplate.go.tmpl": templatesGoRpckit_boilerplateGoTmpl,
	"templates/go/rpckit_client_method.go.tmpl": templatesGoRpckit_client_methodGoTmpl,
	"templates/go/rpckit_header.go.tmpl": templatesGoRpckit_headerGoTmpl,
	"templates/go/rpckit_rpccall.go.tmpl": templatesGoRpckit_rpccallGoTmpl,
	"templates/go/rpckit_serialization.go.tmpl": templatesGoRpckit_serializationGoTmpl,
	"templates/go/rpckit_server_method.go.tmpl": templatesGoRpckit_server_methodGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"go": &bintree{nil, map[string]*bintree{
			"rpckit.go.tmpl": &bintree{templatesGoRpckitGoTmpl, map[string]*bintree{}},
			"rpckit_boilerplate.go.tmpl": &bintree{templatesGoRpckit_boilerplateGoTmpl, map[string]*bintree{}},
			"rpckit_client_method.go.tmpl": &bintree{templatesGoRpckit_client_methodGoTmpl, map[string]*bintree{}},
			"rpckit_header.go.tmpl": &bintree{templatesGoRpckit_headerGoTmpl, map[string]*bintree{}},
			"rpckit_rpccall.go.tmpl": &bintree{templatesGoRpckit_rpccallGoTmpl, map[string]*bintree{}},
			"rpckit_serialization.go.tmpl": &bintree{templatesGoRpckit_serializationGoTmpl, map[string]*bintree{}},
			"rpckit_server_method.go.tmpl": &bintree{templatesGoRpckit_server_methodGoTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

