// Code generated by go-bindata. DO NOT EDIT. @generated
// sources:
// templates/go/rpckit.go.tmpl
// templates/go/rpckit_boilerplate.go.tmpl
// templates/go/rpckit_client_method.go.tmpl
// templates/go/rpckit_header.go.tmpl
// templates/go/rpckit_rpccall.go.tmpl
// templates/go/rpckit_serialization.go.tmpl
// templates/go/rpckit_server_method.go.tmpl
package rpckit2

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesGoRpckitGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd0\xcb\x6a\xf3\x30\x10\x05\xe0\xfd\xff\x14\xc3\xec\x23\xf8\xbb\xef\x2e\x14\xbc\xe8\x85\xf6\x01\x82\x2a\x9d\x24\xa2\xb2\xa4\x8e\xc6\xa1\x54\xf8\xdd\x8b\xd3\x3b\x8e\x43\xb7\x67\xce\xf0\x49\xd3\x1a\x79\x6c\x43\x02\xb1\x14\xf7\x14\x94\x69\x35\x8e\xff\x5a\x23\x45\x5f\xa2\xd5\xaf\xc1\x66\x0f\xeb\x21\x66\x97\x8d\xf6\x25\x32\x19\x5a\x28\x3e\xe6\x10\x21\xc7\x6c\xde\x16\x9b\x76\x20\x73\x0d\xdd\x67\x5f\xa7\xd0\xe5\x54\x95\x1e\x20\x07\xc8\x7b\xdc\x1a\x99\x1b\xdb\x83\xc6\xf1\x57\x4e\x97\x34\x8d\xba\xf5\xb4\x76\x92\xae\x90\x60\x63\x78\xb5\x1a\x72\xfa\xc6\x7d\x70\x4a\x7c\x27\xd8\x86\x17\x26\xbe\xc7\xf3\x80\xaa\x4c\x3c\x29\xfc\x81\x71\xb7\x66\xe2\xff\x4c\x7c\x15\x10\x7d\x65\x32\x5d\x2a\x83\x2e\x7d\xf3\xaf\x56\x2d\x39\x55\x9c\xc4\x2e\x7e\x62\xb7\x83\x9e\xd1\x5c\x0c\x48\xba\xe9\x8f\x87\x98\x9f\x15\xc9\x9f\x79\xe7\x01\xb2\xb8\x39\xeb\x4b\x71\xce\xc6\x38\x6b\xae\x3e\x91\xb7\x00\x00\x00\xff\xff\x31\x08\x8d\xee\x34\x02\x00\x00")

func templatesGoRpckitGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesGoRpckitGoTmpl,
		"templates/go/rpckit.go.tmpl",
	)
}

func templatesGoRpckitGoTmpl() (*asset, error) {
	bytes, err := templatesGoRpckitGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/go/rpckit.go.tmpl", size: 564, mode: os.FileMode(420), modTime: time.Unix(1538655854, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGoRpckit_boilerplateGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x5b\x6f\xdb\xca\x73\x7f\x26\x3f\xc5\x44\x40\x53\x32\x66\x28\xcb\x71\x2e\x47\xb1\x52\xfc\x63\x3b\x6d\xd0\x9c\xc4\x70\x9c\x9e\x07\xc3\x28\x28\x72\x29\x2d\x4c\xee\xaa\x4b\x4a\xb2\xe1\xf8\xbb\x17\xb3\x77\x4a\x94\x72\xe9\xe9\xc3\xdf\x38\x38\x11\x77\x67\x77\x67\x7e\x73\xd9\x99\x21\xdb\xfb\x05\x01\xb1\xc8\xff\x24\x4d\x93\xcd\x08\x50\xd6\x12\x51\x66\x39\x81\x87\x30\xb8\xbc\x38\x3d\x67\x39\x2f\x48\x54\xc3\xb3\x5a\x51\xc4\x40\x84\xe0\x42\x4e\x7e\x3c\x8b\x62\x58\x52\xd6\xbe\x3a\x0e\x1f\xc3\xd0\xec\x75\x9a\x55\xd5\x7f\x64\xac\xa8\x88\xd8\xda\x0f\xe7\xa2\x9a\xb4\x73\x5e\x7c\x3c\xd3\x6b\x13\xf0\xb7\x77\xcc\xe0\x9e\xc3\x21\x3c\xdb\xf5\xa7\x4f\xd4\x2b\xa1\x69\xc5\x32\x6f\xf1\x9c\xe9\xb2\x04\xf5\x77\x7d\x33\xbd\x6f\x49\x18\x54\x84\xe9\x11\xca\xda\x30\x58\xf0\xc6\x3d\xc2\x70\x08\x25\x17\x20\x48\x56\x50\x36\x0b\x83\x4f\x59\xd3\x9e\xa3\x90\x5a\xd4\xc7\x30\x2c\x97\x2c\x07\x46\xd6\x9a\xb3\x28\xcf\x16\x59\x4e\xdb\x7b\x5c\x1f\x5b\xe6\xf1\xec\x1a\xc6\x13\x78\xaa\x07\x1e\xc2\x00\x99\x19\x43\x9d\xdd\x92\x48\x31\x93\xc0\xf1\x81\x59\x1e\x27\x61\x80\xbc\x8d\xe1\x38\x41\x36\x90\x0c\x04\xe7\xb5\x64\xa8\x22\x6c\xd6\xce\x61\x21\x48\x49\xef\xc2\x00\xb9\xfe\x29\xc2\xc7\x30\x10\xa4\x5d\x0a\x06\xb5\xe5\x5d\x33\xf4\x41\xf0\xfa\xfd\x7d\x4b\x9a\xa8\x6e\x66\x1a\x9d\x18\x22\x23\x40\xa2\xe4\x79\x08\x03\x5a\xe2\xae\x48\x15\xc3\x3b\x38\xc6\xa1\x40\x1f\x33\x9e\x20\x55\x34\xa5\x2c\x13\xf7\xe9\x7b\x3a\x3b\x67\x05\xcd\x58\xfa\x8d\xb2\xf6\xc5\x91\x5c\x12\x87\x41\x77\x87\x89\xe1\x11\xf7\xd9\xc6\xc8\xa0\xd4\xcc\x12\xf9\x24\x21\x31\xab\xd5\x90\x16\x1e\x7f\x3f\xe2\xff\x8c\x84\x89\xde\x39\x94\xe3\x4e\x74\x46\xab\x04\x0e\xad\xfc\x1d\x0b\x56\x08\xc4\x5a\x7e\x69\x31\xc8\x51\x9d\x4e\x97\xe5\xf5\xb8\x4e\x2b\xc2\x6e\xc2\x60\x4b\xc0\x8b\x65\xab\x65\x9c\x26\xd2\x74\x51\x5a\x24\x46\x79\xf5\xb1\xd3\xfe\x13\xff\x12\xb4\x25\xff\x95\x09\x04\x6e\xa5\xcd\x5e\xe2\x5c\xa7\x33\xc1\xd7\xd1\x1f\x71\x18\x0c\x87\x14\xb9\x38\x0c\x03\xd4\xe9\x0a\x41\x3b\xbc\x7b\x73\x28\x21\x53\xac\x29\xce\x60\x02\xc8\x76\xb4\x8a\xe1\xbb\xa4\x90\xf3\x15\x61\x07\x07\x61\x10\xac\xe0\xdd\xbb\x09\xbc\x0e\x03\xdc\x0f\x47\x1e\xc3\x1d\xab\x43\xbb\x6a\x37\xcb\x5f\x5b\x41\xd9\x2c\x5a\xa1\x73\x51\x36\x93\x2c\xab\x9f\x9f\xac\x31\xa0\x9e\xd4\x6e\xbe\x94\x4a\xc6\xc8\x27\x8e\xe3\xd0\x0a\xdc\x19\x0f\x83\x9c\x2f\xee\x23\x8f\xcd\xf1\x4d\x02\x96\x43\x38\x98\x80\x4f\xdf\xcf\xaf\xdc\x96\x11\x52\x90\xc2\xb7\x62\x25\xa3\x1e\x7f\xa7\x8c\x0a\xcf\x91\xf3\xc1\x70\x08\x9f\x79\x0b\x84\xf1\xe5\x6c\x0e\xcd\x02\x03\x55\xc6\xee\xd7\x73\x22\x48\x02\x6b\x02\xb8\x10\x5a\x0e\x59\x55\xf1\x3c\x6b\x49\xaa\x3c\x5a\x9a\x4b\x76\x4b\xbe\x56\x34\x27\xd1\xd1\xb3\x3c\x5b\x98\x6d\x0f\x40\x1d\x86\x3e\x20\xc5\x9a\x2e\xcb\x44\xdb\xd6\xa1\x36\xae\xd8\xa8\x14\xb5\xb1\x2c\x51\x49\xbd\x32\x5d\x92\xac\xd0\x2a\x88\x41\x63\x96\xa8\xa8\x24\xf9\x5f\xc9\x07\x65\xbb\x48\xab\xb1\x8f\xa5\xe4\x38\xf3\x64\x82\x8e\xa0\x4d\xc8\xc5\xb5\x09\x4e\x86\xd6\x89\x06\x83\x44\x0d\x3c\x86\x1b\x4e\xbe\x42\x95\x49\x14\x17\xbc\x39\xd0\x73\xef\x14\xa8\x3d\xbb\x52\x9e\x9e\x7f\xf9\xd0\xdd\xd8\x8c\x3d\x86\xd2\x74\x9c\xa3\xc9\x3d\x61\xdc\xd9\xfb\x06\x55\x8e\xc3\x07\x26\x62\x84\xd6\xb5\x94\xf8\x88\x42\x9c\xa0\x54\x08\xd9\x2a\x13\x70\x2e\xc4\x97\x15\x11\x65\xc5\xd7\x4a\x30\x2e\x9a\xf4\x33\x59\x47\x03\x3b\x4c\x19\xac\x24\x34\x83\x78\x17\xcc\x06\x3a\x88\xcc\xa5\xe4\xc1\x9c\x09\xb8\x33\x17\x9d\x7c\x6a\xe4\x93\xf2\x54\xe5\xb5\x6f\xe1\x2d\xd0\x83\x03\x09\x8a\x05\x6c\xd4\xc1\x6a\x17\x58\x46\xc0\x43\x07\x96\x8c\x71\xd3\x0d\xac\x6e\x24\xde\xb8\xef\x81\x3a\x64\x0a\x27\x2e\x44\xe0\x00\x85\x77\xf0\x07\x7c\xff\x0e\x11\x85\xc9\x04\xfe\x80\xa7\x4f\x61\x0a\xef\x60\xa4\xac\x7d\x93\x03\x0f\x39\x39\xeb\xf8\xd8\x98\xf1\x23\xee\x1d\x7c\xd7\x50\x44\xd3\xf8\xe4\xa4\x51\xba\x50\x34\x77\xf0\x7d\x62\x27\x9f\x1e\xde\xbd\x2e\x63\x38\x39\x81\x26\x0c\x02\xa9\xd2\xd7\x7b\x2d\xfd\x3d\xe7\x15\x2a\x60\xca\x79\xf5\xbb\x56\xae\x99\x2c\xb3\xaa\x21\xce\xa8\xf5\xe8\x0a\x41\x19\x59\xe3\x91\xd9\xc3\x9a\x0a\x72\x85\x3f\xb4\x7a\xc3\x9c\xb3\xa6\x85\x28\x0c\xcc\x8c\x3a\x0e\xec\x9f\x5d\x21\x63\xb5\x79\x7a\x75\x3c\xa5\x1e\x91\x4f\x35\x72\x54\x2a\x80\x9d\x91\x8a\xd6\xb4\x25\x85\x4f\x75\xe4\xa8\x5e\x1c\xed\xdc\xeb\x65\x68\x2d\x78\x6d\xc7\x63\xb0\x41\x42\x39\x89\x0c\xd3\x6b\xda\xe6\x73\x58\xe3\xef\x3c\x6b\x9c\xa4\x4a\x9e\xb1\xe7\xa5\xdd\x99\xc1\x06\xbd\x94\xac\x8f\x5c\x4e\x6c\x52\x6f\x48\xd8\xb7\x6e\x83\x64\x73\x07\x29\x7d\xdf\x3a\x39\x31\x08\x83\x82\x94\xd9\xb2\x92\x24\x8b\x8c\xd1\x3c\x1a\x2c\xd9\x2d\xe3\x6b\x26\xb7\x40\xad\x0e\x62\xdf\xd0\xcc\xfa\x0f\x5c\x5c\x08\xbe\x20\xa2\xbd\xc7\xc7\xa8\xc5\x5c\xf3\x96\xb6\x47\xa9\x3f\x1c\x3b\xb8\x1d\x8a\xad\x45\xd1\x2c\x51\x88\x7b\x6c\xee\x90\x6e\x63\x19\xda\x78\xcf\x22\x85\xfc\x06\xed\x47\x34\xc8\x1e\x62\x89\xfb\x36\xad\x87\x07\xda\x2b\xe3\x2d\xd0\x7a\x51\x91\x9a\x30\x44\x39\xde\x07\xdc\x42\x03\x00\xdb\xe8\x6d\xb9\xe9\xc5\xfb\xaf\xb7\x74\x11\xb5\xd9\xcc\x26\x32\xd2\x57\x4d\xa4\x44\x8f\xd4\x35\x82\xb1\x41\xcd\xb8\x5c\xf3\x14\xa2\x68\x84\x51\xe1\x45\x0c\xcf\x61\x14\xc7\x7b\x0c\xf4\xbf\x95\xe7\x6f\x3b\x7e\xbf\x81\x0e\x87\x70\xf5\xe5\xec\x0b\x86\x4e\x41\xb2\xdb\x1f\x5b\xe6\xfe\x05\xd6\x10\xb7\xc8\x5c\x48\xc1\x08\xb3\x3b\x7d\xba\x78\x7f\x95\xcd\xa2\x92\x92\xaa\xf8\xbc\xac\xa7\x44\xd8\x8a\xc7\xda\x98\xf3\xe1\x87\xcd\x14\xaa\xb3\x50\x01\x66\x43\xaf\x5d\x16\xef\x3d\x5e\xc7\x85\x3e\x0e\x56\x59\xb5\x24\x7e\x5e\x47\x4b\x3d\xf6\x64\x02\x83\x81\xbe\xdd\xfb\xc5\x48\x76\x81\x1a\xbb\x45\x26\x75\xc4\x2d\x77\x1b\x94\xde\x5f\x86\xfe\xdd\x5c\xe2\x8d\xb0\xc5\xa3\x8c\xf1\x3f\xc9\xa6\x42\xd4\xe3\x4e\x43\x3c\x32\x9c\xed\xa9\x33\xd5\x3d\x81\xb5\x30\x1a\xb5\xad\x5a\xbd\x9b\xe2\xdf\x09\x23\x82\xe6\xea\x5a\xf5\x29\xe5\x0d\x71\x45\x6b\xc2\x97\x6d\xdf\xec\x28\x0c\x2e\x04\x6f\x79\xce\x2b\x35\xdd\x99\x3d\xc2\x58\xdf\x39\xbc\x5b\x4e\x6b\x27\x93\x55\xb8\x5b\xe8\x57\xe2\x6a\x91\x2b\x8c\x69\x81\xd7\x89\x47\xab\xf6\xd0\x56\xe0\x34\x44\xe0\x99\x59\x1d\xc3\xc6\xfe\xb8\x8f\x31\xfe\x94\x16\x3b\x16\xc9\x7f\x3a\xf7\x91\x5d\x63\x8b\xea\x7d\x98\x2b\x11\xce\x68\x93\x73\xc6\x48\xde\x92\xc2\x74\x14\xf0\xb0\x28\x87\x67\x97\x17\xa7\xa7\x6a\x8e\x72\xa6\xe2\x84\x61\xd2\x83\xcd\x91\x78\x30\x34\xf7\x2c\x4f\x2f\xff\xfa\x73\xd9\x92\x3b\xac\x3d\xf4\x09\x88\x0d\x5a\x9a\x1a\xb2\xb7\x2f\x23\x6d\x8a\xdb\x84\x01\x67\x8e\xa1\x3e\xde\xc2\x60\xae\x7e\xa8\xee\x42\x9d\x2d\xae\x95\xad\xdc\x74\xbb\x22\x61\xb0\xce\x68\x4b\xd9\x0c\xc7\x1a\x9f\x2e\x9f\x67\xcc\x7a\x87\x49\x70\xc5\x22\xbf\x10\x24\xab\xa7\x15\x66\x00\xaa\x68\x7d\x78\x73\x94\xc0\x9b\xc3\x04\x5e\xbd\x4e\xe0\xf5\xcb\x04\x5e\xbf\x48\xe0\xcd\x71\x82\xc9\x9b\xfa\x6f\xf4\x08\xc3\xe1\x65\x72\x91\x9c\x26\xff\x99\x7c\x4c\xae\x20\x4d\x61\x45\x44\x83\x50\x8c\x94\xca\x3e\x93\x75\x07\xa2\x48\xca\x6d\xe4\x8d\x21\xda\x04\xd9\x02\x2c\x63\xb6\xac\xe2\x3b\x14\x0f\xb2\xe6\xd1\xa0\x8c\x11\x83\x56\x2c\x49\xa2\x47\xc7\x16\x52\x7c\xc2\x51\x03\xd7\x58\xe3\x75\x4b\xa2\x9d\xa0\xc9\x3e\x80\x8f\xdb\x78\x6b\x41\x07\x3d\xa4\xc7\x9a\x63\x38\x84\x86\xb0\x02\xda\x39\x81\x85\x20\xd9\xb4\x22\x61\xc0\x6c\x4a\x99\xa7\xc8\x8c\x0a\x0a\x91\x87\xf4\xbe\xec\x52\xf6\x16\x9e\x1a\x63\x7f\xa0\xc5\x18\xfc\x10\xa0\x73\xd7\x31\x94\x75\x9b\x7e\x5d\x60\xa0\x29\xa3\xc1\x29\x5f\x56\x85\xbc\x95\xd7\x78\x96\xe4\x05\x0f\x4a\xe1\x8c\xb4\x19\x45\x79\xfe\x65\xa5\x0a\xb1\x58\x75\x32\x68\x09\x0c\x4f\xc7\x9a\xd5\xe7\xec\x07\xac\x74\x22\x8a\xe5\xc5\x3b\x5f\xc2\x41\x58\x4b\x05\x72\xa1\x88\x1d\x3b\x83\x47\x85\xdb\x8c\x43\x9e\x0a\x92\x15\x9f\x38\x5f\x44\xae\xc3\x91\xdb\xfc\x59\xb9\xfd\xa6\x2b\x62\x92\x50\xf3\x96\xfc\xa3\x28\x30\x00\xa0\x35\xe1\x4f\x2f\x04\x68\xc8\x7d\xb2\x7d\xdb\x39\x1e\xd4\x1e\x39\xa1\x2b\x52\x58\x8f\x18\xeb\x9b\x20\xf4\xeb\x72\xdb\x6b\x3b\x4c\xe0\xe5\xe8\x28\x0e\x03\x5e\x96\xba\xbb\x52\x53\x86\xc9\x04\x3e\x1d\xbd\x7c\xa5\x2c\xe4\x96\x56\x15\x4c\xb3\x02\x72\x7b\x70\x23\xf3\x25\x13\x70\x62\x53\xd8\x4d\xd5\x4a\x41\x72\xbe\x22\x22\x8a\xdf\xca\x11\xcf\x46\x82\x3c\x25\xac\x88\x7e\xd5\x3c\x96\x4c\x39\x43\xa1\x93\x29\xca\x3c\xc1\xb5\x69\x4c\xb3\x22\x7e\x8c\x75\xa7\x2b\xc2\xd2\xbc\x54\x69\x17\x8a\x80\xd4\x50\x0a\x5e\x4b\x4b\x77\x72\x28\xb6\x51\x7c\xd5\x85\x8b\x6c\xf3\x23\xb0\x0d\x88\xeb\xf1\x21\x16\x97\x12\x24\x89\x51\x80\xc1\x03\xd0\x0c\x70\x71\x29\x88\xc4\x39\xcf\x16\x6a\xf5\x73\xbb\xd1\x5b\x35\x79\x02\x06\x55\xb9\xf1\x70\x88\xb2\x5d\xa0\x68\x15\x8b\x06\x33\xc1\xd7\x98\x54\x4a\x3e\xd9\x56\xbf\x05\x9f\x0b\x9c\x65\x64\xfd\x5e\xe9\x50\x36\x45\x0c\xe3\x07\x7d\x47\xf4\x6e\xb5\x6c\xf0\xb2\x99\x92\x19\x65\x0c\x7f\xf1\x12\x77\x2a\x89\x78\x6b\x96\x14\x7c\x89\x46\xa3\x46\xc1\xf4\x61\xe5\xac\x3e\x7d\xbb\xb1\xa3\xdb\x3a\xfa\xf8\xd8\x16\xc4\xb2\xbb\xa3\x56\x25\x12\x45\x5e\x96\x63\xd9\xdb\xd1\xc8\xaa\xb9\xeb\xb1\x01\xeb\x39\x2f\xcb\x4d\x9c\x31\x25\xd9\x0c\x46\x78\x0c\x2e\xb8\x36\x0b\xc7\x86\x0d\xb9\xbb\x53\xdb\x21\x8c\xad\x26\x0e\xea\x1b\xa5\x2d\x99\x31\x9b\xf6\x82\x6f\x92\x8c\x56\xb1\x2b\xe4\xf5\xe1\xdb\x41\xee\x37\x0d\x58\x99\xad\x6e\xa2\x2b\x43\x74\x46\xd8\x6b\xce\x32\xd2\x6d\x72\x14\x06\xd6\xa8\x51\x5f\xf9\x9c\xe4\xb7\xb2\xc9\xbd\x10\xa4\x56\xc1\x5b\x32\xfd\x64\x2b\x10\x28\xb3\xd0\x6d\x67\xa7\x0e\x63\xf6\x5b\x11\x54\x11\x63\x98\x68\xd2\xf3\xff\x59\x66\x95\x4f\xe2\x14\x8a\x06\xb8\xb9\xfe\xc6\xee\x20\x55\x79\xb0\x7d\x82\x9e\xdd\x62\x72\x22\x6f\x44\x35\xfb\x08\xc4\x64\xb0\xc1\x0e\xd8\x77\xc4\xf2\xab\x39\x81\x92\x8a\xa6\x55\xec\x83\x39\xc6\xf9\x3f\x6f\xe7\x44\xa0\x5f\xc1\x3a\x6b\xa4\xa3\xe0\x28\xb9\x5b\xa8\x4c\x47\x95\x8d\x36\xe8\x0f\x1e\x1d\xc3\x5a\x13\xc6\xc8\x2d\x97\x36\x20\x04\xb6\x0c\x32\x34\x6a\x78\x38\x84\x45\x26\x1a\xfb\x42\xa6\x91\x2d\xaf\x66\x66\x3a\xf4\x32\x36\x6f\xbe\x86\xe8\xba\x0d\x2d\xa1\x6e\x66\x1d\x63\xf4\x00\x56\x5d\x7e\x04\x6a\xc6\x5b\xf3\x26\xa6\x6e\x66\xca\x23\x7d\x30\x2d\x7f\x8f\xe6\xb5\xc0\x9e\xfb\xa5\xbb\x99\x57\x9b\x3c\x84\x41\xeb\x5a\x4f\xcd\xac\x53\x83\x22\x1c\xeb\x79\xd6\xc2\x2d\x65\x05\x06\x1a\xf3\x0e\x88\x36\x80\xd5\xf9\xb6\x5f\xfd\x82\x7e\xdd\x5d\x2d\xa3\xba\xd9\x5a\x26\xb5\x59\x23\x55\xa9\xd4\xaf\xba\x9a\xe8\x5d\x38\x46\x59\xce\xeb\x1a\xdd\x4f\xaf\x48\x95\x62\x8d\x52\x65\x0b\x76\xb3\xa1\x31\x1a\xcb\x17\x4a\xf2\x95\x1c\xe4\x59\x55\x21\xab\x59\x55\x7d\x3c\xfb\xb1\xec\x54\xf1\x42\x25\x00\xed\x9c\x36\x72\x83\x7f\xfb\xf9\xb0\xf2\x73\xf2\x4b\x76\xb4\x71\x1b\x2c\x70\x4c\x8b\xd7\x0d\x68\x26\xa3\xf9\x05\xfe\x6d\x12\x34\x25\x08\x1e\x6e\x4d\x8a\xbf\x5d\x0a\xcb\x58\x9f\x24\x70\x5a\xf1\x86\xf8\xf9\x47\x8f\x70\x2e\x63\x4e\xa0\xe4\x4b\x56\xa8\x3b\xc3\x64\xd1\xd7\x4e\x74\x7d\x15\x3c\x51\x54\xbf\xc8\x78\x27\xac\x7f\x73\x1d\x22\x49\xaa\x63\xb7\x3b\xaa\x37\x84\x9b\x37\xbc\x3f\xad\x02\x6d\x7f\xff\xaf\x0a\xb0\xaf\x9d\x7f\x1f\x7e\x41\x9a\x65\xd5\xa2\x40\x1a\xf4\x74\xf3\x9d\x76\x02\x3a\x22\xd1\x12\x34\xb5\xcf\xbd\x20\x8b\xea\x1e\xd7\x7b\x2f\x93\x47\x87\x47\xc7\xb1\x9d\xec\xf4\x27\x8e\x62\x55\x30\x39\x0f\x75\x01\x7a\x9b\x5a\xb9\xad\xc4\x16\x7f\xd2\xa2\x9f\x4c\xb1\x95\xea\x17\xf8\xfa\x64\x33\xa4\x5f\xf8\xcb\x55\xb1\xc2\x1b\xeb\x05\x37\xe0\x32\x43\xbf\x67\x76\x34\xee\xe3\xf1\x9f\x25\x8e\xfc\xac\xfa\xf3\xf4\xf2\x13\xcf\x6f\x23\xf9\x6e\x6f\xde\x71\x42\xbf\x32\xbd\x56\x72\xdf\xa8\x15\xdf\x58\x65\xd6\xfc\x3d\x2e\xe9\xa4\x2a\xf1\xee\xc9\x40\x9f\x2d\x65\x91\xb9\x92\xac\x00\xf0\x01\x77\x94\xfe\xaa\x4d\xa3\x57\xa8\x39\x9c\x3c\x47\xdd\xf8\xfd\xcd\x3d\xf7\x65\xc5\x67\xaa\xbb\xd3\x69\xb9\xa0\x44\x9d\xa4\xff\xfc\xf2\xf2\xcb\xa5\xca\xf2\x52\xdd\x0d\xda\x5b\xe6\x21\x87\x11\x4a\xf2\x81\x8b\x4b\xe9\x25\xea\x3d\x90\x8b\x34\xee\x73\x91\xcd\xef\x47\x70\xed\x3f\xc4\xac\xf1\x3e\x1e\xf1\x5e\xe4\xb9\xaf\x1b\x3a\xdc\xa2\x97\x08\x92\xb5\xc4\xc1\x65\x1a\x2f\xda\x70\x51\xb3\xba\xdf\x3a\x3a\x7a\x71\x2c\xed\xf5\xea\xcb\xd9\x97\x31\xe8\x86\xb9\x01\x39\xd5\xdf\x7d\x6c\x3b\xf5\x66\xbb\xd1\xbd\xd4\x19\x0e\x81\xb6\xff\xda\x40\xd6\xbd\x7b\xeb\x5e\x8f\xee\xc6\x00\xe5\xdc\x5b\xbb\x7b\x31\x19\x89\xed\xad\x86\x71\xa0\x4b\x69\x00\x8c\x3b\xdb\x22\x9d\x29\x44\x34\xa0\x5e\x44\xa8\xf7\x75\x44\x0e\x93\xdf\x6b\x8a\x7c\x63\x98\xd2\x43\xcb\x81\xc8\x53\x14\xa0\x99\x98\x6d\x76\x43\x4c\xd0\x41\x0f\xea\x18\x49\x0f\x13\x3a\x62\xd5\xb1\xd7\x00\x6a\x97\x0b\xa7\xe6\x8c\x15\xd0\xd2\x9a\x88\x10\x8d\xdf\xb4\x0c\x3a\xdd\xa3\x04\x46\x71\x18\x48\x22\x24\xc0\x1f\xe9\x67\xb2\xbe\xc2\x81\xe8\x25\x3c\x53\x23\x5f\x49\xce\x19\x2a\x22\x4f\x4d\x5c\xe8\x8f\x04\x30\x81\x7c\x8e\x93\x2e\x18\x6c\x35\x17\x72\x8c\x41\x51\x3e\x47\x17\x95\x07\xa7\x5f\x5b\xd5\x79\xf1\xb6\x0f\x0a\x52\x91\x96\x44\xdd\x63\xac\x7f\x4b\x5a\x77\x86\x6a\x12\xf8\x1d\x30\x29\x3f\x5f\x11\x81\x98\xdb\x42\xa1\xa1\x05\x09\x03\x24\x3a\x37\x85\xa8\x85\x90\x96\x60\x26\x76\xeb\x5d\x53\x58\xc0\x91\x39\x1b\x89\xe4\xd5\x81\xdb\x57\x24\x77\x79\x27\xe6\xda\xe3\x09\x9c\x3c\xcf\xe7\x63\x7b\xb3\x5e\xdd\x2f\xc8\x9e\x0b\x63\xd7\x85\x20\xc3\x77\x14\x77\xdf\xa5\xff\x96\x41\x7e\x64\xab\xac\xa2\x2e\xe5\x2e\xb9\xa8\xb3\xd6\x16\x58\x7d\x37\x45\x7f\xff\x4e\xe6\xa2\x9a\x99\xae\x6c\xb2\x24\x92\xef\xcc\x25\x0e\x27\xcf\x95\xb2\x4f\xc7\x3f\x72\x27\xff\x45\x82\x57\x0b\xd2\x9a\x14\xc0\x97\xad\xbd\x06\xd4\xc7\x6c\x8b\xea\x7e\xf0\xa3\xd2\x47\x29\xb9\x53\xf4\xd8\x57\x0d\x0f\x61\xa0\x8a\x4b\xad\x07\xfd\xd1\xd4\xce\xde\xa9\x24\xde\x17\x23\xfe\xaf\x0d\x53\xa3\x12\xce\x3c\xf4\xf7\x36\x4d\x15\x4b\xba\xf8\x72\x36\xd2\xcb\xcf\x8e\x0c\xc2\x7c\x17\x69\xaa\xe8\x72\x59\x55\xf7\x88\x5b\xdb\x9f\x34\x6c\x7c\x82\xb6\x0f\x7c\xcd\x90\x74\x08\xd7\x9f\xd9\xb3\x00\x69\xb6\xee\x5c\x17\x1a\x54\x40\xf1\xdd\x9f\x96\x5a\x45\xaa\xe8\x57\x38\xb8\x67\xdb\x38\xd5\xa3\x1e\x44\x3a\xa9\xf1\x5f\x78\x28\xdf\xdb\x6c\x75\x76\x5e\x89\x4c\xf4\xa7\x20\x41\x11\xe5\x4a\x27\x3f\x51\x7e\x37\xa4\xd5\x1d\xfe\xa8\xe7\xaa\xd7\x69\xf6\xc6\x67\xa5\x5a\xf2\xbe\xc2\x07\x6c\x6a\xee\xbe\x7d\xb4\xfd\x3c\xa6\xbe\x0c\x73\xdf\xfd\x0d\x87\xf0\xb1\x54\x05\x48\x76\x4b\xa0\x44\x3f\x4e\x60\x46\x57\x04\x32\x50\x85\x8f\xb4\x84\xb4\xbf\x19\x6c\xbb\xc0\x1d\x54\xd4\xbb\x75\xdd\x58\x12\xe2\x8a\xf3\x4f\x99\x98\x11\xaf\x71\x6b\xbf\x5e\xf4\x5b\xd5\x0c\x95\xff\xbf\x01\x00\x00\xff\xff\x86\x63\x22\x54\x90\x2b\x00\x00")

func templatesGoRpckit_boilerplateGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesGoRpckit_boilerplateGoTmpl,
		"templates/go/rpckit_boilerplate.go.tmpl",
	)
}

func templatesGoRpckit_boilerplateGoTmpl() (*asset, error) {
	bytes, err := templatesGoRpckit_boilerplateGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/go/rpckit_boilerplate.go.tmpl", size: 11152, mode: os.FileMode(436), modTime: time.Unix(1538655763, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGoRpckit_client_methodGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x52\xcd\x8a\xdb\x30\x10\xbe\xfb\x29\xa6\x81\x2e\x76\x51\x0d\x2d\xa5\x07\x83\x4f\x89\x59\xf6\xb0\x9b\xa0\xa4\xe7\x62\xe4\x71\x2a\xb0\x25\x77\x2c\x05\x8a\xd1\xbb\x17\xc9\x3f\xc8\xd0\xc3\x42\x75\x1a\x8d\xbe\x99\xef\xc7\x6e\xad\x12\x90\x0a\xf8\x74\x45\x7a\x20\x1d\x3b\x89\xca\x64\x30\x4d\x90\xbf\xd5\x3d\x3a\x97\xfa\x9a\x6a\x75\x47\xc8\x5f\xd4\x60\x0d\x38\x97\xc0\x72\x56\x18\x38\x17\xea\x5b\xfe\xac\x6f\x7f\x06\x7f\x67\xc9\x0c\xf8\x0c\xa8\x9a\x75\x26\x83\x78\xdd\xd9\x9a\xff\xdc\xe7\x0f\x12\x01\xbf\x1c\x2b\x22\x4d\x6c\x61\x99\x92\x50\x10\x8e\xb6\x33\x7e\xc1\xcb\x89\x41\x3f\xde\x59\x40\x17\x25\x88\x5c\xe4\xa2\xee\xba\xd4\x90\x45\x06\x5f\x18\x58\xa9\xcc\xf7\x6f\xe9\x1c\xc3\x2b\x9a\x5f\xba\x89\xd4\x64\x0c\x9e\xc6\xf0\xc4\xf1\xb7\xc5\xd1\xfc\x8c\x1e\xa7\x77\x46\x54\xc4\x17\x16\x21\x76\x9e\x5c\x36\x8b\x97\xed\x4e\x3f\x94\x25\x7c\x85\x69\x9b\x7a\xd4\x04\x04\xab\xa6\x71\xd0\x6a\xc4\x58\xd4\x06\x6c\x50\xe8\x06\x43\x3c\xde\x39\xe5\xfc\x72\x3c\x85\x5e\xda\x8f\xf7\x6c\xc3\xc9\x76\x07\xfd\x50\x82\x92\x5d\x44\xb8\x66\x5d\xc2\x13\x0d\x22\x80\x26\xd9\x14\xf0\x8c\x0a\x49\xce\x8d\x90\xaf\xa6\x02\xda\xde\xe4\xd7\x81\xa4\x32\x6d\x7a\x10\xda\x76\x0d\x28\x6d\x16\x82\xc5\x57\x01\x1f\x1f\x07\x16\x93\x66\x6e\xc7\x46\x68\x2c\xa9\xad\xb5\xcb\xf4\x5d\xbf\x90\x77\xfb\xaf\x48\x96\xc4\xa3\x4e\x44\xe5\xe6\xf8\xbd\x83\x8b\x37\xd0\xa9\xf4\x70\x3d\xbf\x56\x50\x71\x7e\xe6\xc0\xab\xdb\x0f\xfe\x56\x9d\x0e\x6c\xf7\x79\xb2\x24\x5a\xe3\x92\xbf\x01\x00\x00\xff\xff\x5b\x28\x5e\x1e\x57\x03\x00\x00")

func templatesGoRpckit_client_methodGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesGoRpckit_client_methodGoTmpl,
		"templates/go/rpckit_client_method.go.tmpl",
	)
}

func templatesGoRpckit_client_methodGoTmpl() (*asset, error) {
	bytes, err := templatesGoRpckit_client_methodGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/go/rpckit_client_method.go.tmpl", size: 855, mode: os.FileMode(436), modTime: time.Unix(1538654668, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGoRpckit_headerGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8c\x31\x6f\xc2\x40\x0c\x85\x67\xfc\x2b\xac\x0c\x15\x30\x10\xa9\xaa\x3a\x74\xcd\x5c\x84\xda\x5f\x70\x31\x26\x58\x10\xdf\xc9\x71\xda\x46\xa7\xfb\xef\x55\xc2\x02\x2c\x7e\xf6\x7b\x7e\x5f\x0a\x74\x09\x1d\x63\xce\xb8\x3b\xdc\xf6\x7d\xe8\x19\x4b\x01\x90\x3e\x45\x73\x5c\x03\x22\x62\xd5\x4e\xce\x43\x05\xab\x8a\x95\xe2\x51\xb4\xab\x5b\xd1\x60\xd3\x62\x99\x45\x5b\xc2\x53\xef\xb3\x48\x9c\xa7\xf2\x72\x0c\x93\xd2\xac\x2e\x3d\x57\x70\xa3\x75\xe2\xd7\xd0\xee\x28\xf6\x35\xff\x85\xe1\x1c\x12\xd7\x96\xe8\x22\xfe\x5a\xc1\x06\xc0\xa7\xc4\xf8\xcd\xf6\xc3\xf6\xc9\x7e\x8e\x47\x1c\x45\xfd\xfd\xed\x21\x69\xae\xc2\xea\x38\xb8\x8d\xe4\x98\x17\x32\xe1\xf6\xeb\xd0\x34\x51\x95\xc9\x25\x2a\x14\x80\xd3\xa8\x84\x7b\xfe\xbd\x6f\xad\x9f\x1f\x37\xb8\x7d\xa0\x66\x58\x19\xfb\x68\x8a\x2f\xf7\x7e\xa6\x0f\xa4\x02\x05\xfe\x03\x00\x00\xff\xff\x13\x30\x9c\xd2\x3a\x01\x00\x00")

func templatesGoRpckit_headerGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesGoRpckit_headerGoTmpl,
		"templates/go/rpckit_header.go.tmpl",
	)
}

func templatesGoRpckit_headerGoTmpl() (*asset, error) {
	bytes, err := templatesGoRpckit_headerGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/go/rpckit_header.go.tmpl", size: 314, mode: os.FileMode(436), modTime: time.Unix(1538655731, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGoRpckit_rpccallGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\xb1\x8e\xa3\x30\x14\xec\xf3\x15\x73\xcd\x09\x22\x8e\x34\xa7\x2b\x88\x52\x85\xe2\x52\x64\x13\xa1\x95\xb6\x5c\x59\xf0\x20\x68\xc1\xb0\xb6\xd9\x2d\x2c\xff\xfb\xca\x40\x00\xa3\x34\x2b\xad\x2b\xf3\x66\x9e\xdf\xcc\x3c\xf2\x8e\xa7\xf0\x24\xb6\x92\xc4\x07\x89\x33\xa9\x5b\x93\xc9\x23\xab\xaa\xff\x8c\x67\x15\x09\x1f\xc9\xf5\x68\xbf\xbd\xba\xc7\x4e\x31\xba\x92\xab\x7f\x7f\x03\xd4\xd8\xd6\x24\x25\x2b\xc8\x87\x68\xd3\xf3\x70\x87\xde\x00\x80\xfc\x2c\x55\x7a\xc3\xd4\xa4\xa1\x35\x04\xe3\x05\x21\x1c\xa7\xc0\x98\x9e\x9a\x32\x49\x16\x0d\x4f\x31\x8c\x89\xfa\x9a\x3d\x4c\x14\x12\xd1\x01\x83\xb4\x84\xde\x3b\x92\xea\xd5\x12\x9f\x58\x4d\x30\x46\x9b\x89\x5b\xe6\x20\x21\x2c\xdb\x76\x85\xc9\xf5\x18\x53\xda\x64\xe4\xd5\xfe\xbe\x47\x7e\x1d\xc0\xcb\x6a\x14\x77\x3f\xbb\x1d\x9e\x2f\xf1\x25\xc2\x8b\x60\xad\xa5\x35\xc2\xc1\x05\xa9\x4e\x70\xdb\x38\x95\xe7\x91\xb3\x9f\x4b\xa7\xda\x4e\x59\x41\x0b\x6d\x1a\xc4\x33\x18\x13\xdc\x85\xc9\x70\x08\x43\x86\x0b\x9a\xb7\x78\xe6\xc4\x87\x57\x1c\x09\xbd\x9d\x45\x43\xe0\xa0\x5a\xff\x19\xc7\x4c\x65\x7f\x9d\xc9\x43\xe7\x65\xde\xaf\x4c\x16\x01\x9a\x37\xab\x8e\x84\x08\xbd\x79\x8b\xfe\xde\xd6\xdd\x9e\x45\x22\x43\xaf\x83\x9a\x9f\x4b\x76\x04\x7f\xdf\x17\x2f\xdb\x86\x4b\x72\x36\xff\x28\xfd\x55\x32\x13\x39\xc2\x77\xf2\x1b\x6e\x2b\x20\xa3\x9c\x75\x95\x9a\xff\xcd\xc9\x5f\x32\x68\x75\x1d\xae\xdc\x99\x8d\xd9\x7c\x05\x00\x00\xff\xff\x5d\x43\xe2\x9f\x69\x03\x00\x00")

func templatesGoRpckit_rpccallGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesGoRpckit_rpccallGoTmpl,
		"templates/go/rpckit_rpccall.go.tmpl",
	)
}

func templatesGoRpckit_rpccallGoTmpl() (*asset, error) {
	bytes, err := templatesGoRpckit_rpccallGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/go/rpckit_rpccall.go.tmpl", size: 873, mode: os.FileMode(436), modTime: time.Unix(1538655157, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGoRpckit_serializationGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x52\xc1\x6e\xd4\x30\x10\xbd\xe7\x2b\x1e\xb7\xb8\x2a\x3e\x00\xe2\x80\xba\x97\xb2\x5d\xd4\x0b\x44\x6d\x05\x47\x64\x25\x93\x60\x75\xe3\x44\x63\xa7\xa5\x18\xff\x3b\xb2\x93\x26\xd9\x15\x45\x48\xeb\x43\x34\xf1\x3c\xbd\xf7\xe6\x8d\xdd\x53\x4f\xb0\xc4\x0f\xc4\xde\xa3\x54\xbd\x76\x6a\xaf\x7f\x11\x64\xc1\x54\xeb\x9f\x08\xe1\xbb\xf7\x90\x9f\x55\x4b\x08\x01\xd6\xf1\x50\x3a\x78\x78\x0f\x56\xa6\x21\xc8\x9d\xa6\x7d\x65\x11\x42\x06\x00\x6b\x70\xac\xef\xe4\xa7\xee\x2e\x8a\x84\x90\x79\xff\x1a\x64\xaa\x58\x86\x2c\xab\x07\x53\x22\xb7\x38\xfb\x7f\x79\x81\x9b\xe2\xe3\xf5\x36\x17\x18\xb4\x71\xef\xdf\xc1\x27\x4d\x26\x37\xb0\x49\x72\xd7\xdb\x13\xd9\xaf\x4c\xd9\x55\x94\xb7\x38\x6b\xc9\x5a\xd5\x90\x00\x31\x77\xfc\x8f\x91\x5b\xf9\x8d\xb5\xa3\xe2\x72\x9c\xf7\xd6\xb1\x36\x0d\x42\xc8\x67\x43\xe7\xb0\x72\x2d\x34\x25\x35\xa7\xb1\x1a\xc2\xe8\xfd\x29\xf6\xb7\xf4\x92\xfd\x24\xf2\xa0\x18\x79\xaa\xe2\x21\xe6\xb1\x3b\xdf\x38\xd5\x4c\xd1\xa6\xab\xd1\x68\xdd\x25\x18\x36\x9b\xe8\x6e\x62\x9a\xd0\xe7\x63\x07\xad\xbc\x21\x55\x7d\x55\xac\x8d\xcb\xc5\x8c\xb0\x8f\xda\x95\x3f\x12\xed\xcb\xf9\xc5\x53\x2a\x4b\x93\xf2\x12\x1b\x2e\x2e\xf0\x56\xe0\xf7\x73\xe3\x51\x33\xc5\xb7\xb4\xeb\xb8\xe0\xae\x27\x76\x4f\xf1\x37\xe7\xbe\xbc\xd7\xee\x8d\x3c\xca\x5f\x88\x0f\x33\x7f\x32\xb3\xde\xc1\xa1\xf1\xe3\xcd\x2d\x13\x1c\x6d\x29\x9e\x8a\x6a\x35\xec\xdd\x21\xb9\xae\x13\xe1\xab\x0d\x74\x27\xaf\xbe\xec\x56\x31\xad\xe3\x7e\x16\x2c\x2e\x6f\xef\x75\x9f\x3b\xd5\x88\x03\xdc\xa2\x32\x56\xe3\x77\x22\xdf\xfc\x85\x7c\xf5\x6c\x16\xfc\x74\x49\xcc\x59\xc8\xfe\x04\x00\x00\xff\xff\xd8\x24\xb0\xf1\xe3\x03\x00\x00")

func templatesGoRpckit_serializationGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesGoRpckit_serializationGoTmpl,
		"templates/go/rpckit_serialization.go.tmpl",
	)
}

func templatesGoRpckit_serializationGoTmpl() (*asset, error) {
	bytes, err := templatesGoRpckit_serializationGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/go/rpckit_serialization.go.tmpl", size: 995, mode: os.FileMode(436), modTime: time.Unix(1538655131, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGoRpckit_server_methodGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\xcf\x6a\xc3\x30\x0c\xc6\xef\x7e\x8a\xef\x34\x9a\x91\x05\x76\xdd\xb5\x87\x6d\x87\xfd\xa1\xeb\x0b\x18\x47\xed\x02\xa9\x5c\x64\x65\x30\x8c\xde\x7d\x38\x4d\x20\x0d\xec\x54\x83\xc1\x48\x3f\xfd\x3e\x63\xeb\xef\x99\xf0\x45\xf2\x43\xf2\x46\xfa\x1d\xdb\x84\x8e\x95\xe4\xe0\x03\x21\x23\x67\x88\xe7\x23\xa1\x99\xbb\x66\x0e\x40\x69\x34\xef\xfe\x44\x30\xdb\x2c\xa8\x57\x3e\x0f\x3a\x33\x2b\x6e\x3c\xef\x9b\xe7\xb8\x2f\x99\x66\xf5\x24\x7a\x00\x71\x3b\xcf\x54\x58\xea\x3e\x06\xbd\xd1\x57\x16\x89\x94\x1d\xe5\x42\x54\x6b\xce\x9c\x3b\x0c\x1c\xb0\xa3\x63\x97\x94\x64\xf7\xb9\xdd\xfa\xbe\x7f\xf1\xdc\xf6\x24\x9b\x80\xfb\x52\x89\xcc\x14\xb4\x8b\x5c\x23\x5d\xbf\x58\x85\x3c\x2a\x43\x93\x48\xe7\xa9\xc7\x1a\x77\x69\x49\x2d\x94\xf9\x74\x29\x3d\x21\x59\x55\xe2\xc7\x5f\xf8\x8f\x46\x52\x19\x82\x4e\x21\xd3\xe8\xf5\x0d\x9c\xb9\xbf\x00\x00\x00\xff\xff\x34\xcf\x01\x2d\xc9\x01\x00\x00")

func templatesGoRpckit_server_methodGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesGoRpckit_server_methodGoTmpl,
		"templates/go/rpckit_server_method.go.tmpl",
	)
}

func templatesGoRpckit_server_methodGoTmpl() (*asset, error) {
	bytes, err := templatesGoRpckit_server_methodGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/go/rpckit_server_method.go.tmpl", size: 457, mode: os.FileMode(436), modTime: time.Unix(1538654648, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/go/rpckit.go.tmpl": templatesGoRpckitGoTmpl,
	"templates/go/rpckit_boilerplate.go.tmpl": templatesGoRpckit_boilerplateGoTmpl,
	"templates/go/rpckit_client_method.go.tmpl": templatesGoRpckit_client_methodGoTmpl,
	"templates/go/rpckit_header.go.tmpl": templatesGoRpckit_headerGoTmpl,
	"templates/go/rpckit_rpccall.go.tmpl": templatesGoRpckit_rpccallGoTmpl,
	"templates/go/rpckit_serialization.go.tmpl": templatesGoRpckit_serializationGoTmpl,
	"templates/go/rpckit_server_method.go.tmpl": templatesGoRpckit_server_methodGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"go": &bintree{nil, map[string]*bintree{
			"rpckit.go.tmpl": &bintree{templatesGoRpckitGoTmpl, map[string]*bintree{}},
			"rpckit_boilerplate.go.tmpl": &bintree{templatesGoRpckit_boilerplateGoTmpl, map[string]*bintree{}},
			"rpckit_client_method.go.tmpl": &bintree{templatesGoRpckit_client_methodGoTmpl, map[string]*bintree{}},
			"rpckit_header.go.tmpl": &bintree{templatesGoRpckit_headerGoTmpl, map[string]*bintree{}},
			"rpckit_rpccall.go.tmpl": &bintree{templatesGoRpckit_rpccallGoTmpl, map[string]*bintree{}},
			"rpckit_serialization.go.tmpl": &bintree{templatesGoRpckit_serializationGoTmpl, map[string]*bintree{}},
			"rpckit_server_method.go.tmpl": &bintree{templatesGoRpckit_server_methodGoTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

